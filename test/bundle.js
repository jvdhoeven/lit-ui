/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var t={772:(t,e,i)=>{i.d(e,{Z:()=>l});var n=i(537),s=i.n(n),o=i(645),r=i.n(o)()(s());r.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap);"]),r.push([t.id,":root {\r\n    --ui-base-font-color: #333333;\r\n    --ui-base-font-family: Roboto;\r\n    --ui-base-font-size: 16px;\r\n\r\n    --ui-heading-font-color: var(--ui-base-font-color);\r\n    --ui-heading-font-family: var(--ui-base-font-family);\r\n}\r\n\r\nhtml, body {\r\n    font-family: var(--ui-base-font-family);\r\n    color: var(--ui-base-font-color);\r\n    font-size: var(--ui-base-font-size);\r\n    line-height: 1.5;\r\n}\r\n\r\n/* UTILS */\r\n\r\n.ui-text-left {\r\n    text-align: left;\r\n}\r\n\r\n.ui-text-center {\r\n    text-align: center;\r\n}\r\n\r\n.ui-text-right {\r\n    text-align: right;\r\n}\r\n\r\n.ui-margin-1 {\r\n    margin-top: 8px;\r\n    margin-bottom: 8px;\r\n}\r\n\r\n.ui-margin-2 {\r\n    margin-top: 16px;\r\n    margin-bottom: 16px;\r\n}\r\n\r\n.ui-margin-3 {\r\n    margin-top: 24px;\r\n    margin-bottom: 24px;\r\n}\r\n\r\n.ui-margin-4 {\r\n    margin-top: 32px;\r\n    margin-bottom: 32px;\r\n}","",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"AAEA;IACI,6BAA6B;IAC7B,6BAA6B;IAC7B,yBAAyB;;IAEzB,kDAAkD;IAClD,oDAAoD;AACxD;;AAEA;IACI,uCAAuC;IACvC,gCAAgC;IAChC,mCAAmC;IACnC,gBAAgB;AACpB;;AAEA,UAAU;;AAEV;IACI,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,gBAAgB;IAChB,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;IAChB,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;IAChB,mBAAmB;AACvB",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap');\r\n\r\n:root {\r\n    --ui-base-font-color: #333333;\r\n    --ui-base-font-family: Roboto;\r\n    --ui-base-font-size: 16px;\r\n\r\n    --ui-heading-font-color: var(--ui-base-font-color);\r\n    --ui-heading-font-family: var(--ui-base-font-family);\r\n}\r\n\r\nhtml, body {\r\n    font-family: var(--ui-base-font-family);\r\n    color: var(--ui-base-font-color);\r\n    font-size: var(--ui-base-font-size);\r\n    line-height: 1.5;\r\n}\r\n\r\n/* UTILS */\r\n\r\n.ui-text-left {\r\n    text-align: left;\r\n}\r\n\r\n.ui-text-center {\r\n    text-align: center;\r\n}\r\n\r\n.ui-text-right {\r\n    text-align: right;\r\n}\r\n\r\n.ui-margin-1 {\r\n    margin-top: 8px;\r\n    margin-bottom: 8px;\r\n}\r\n\r\n.ui-margin-2 {\r\n    margin-top: 16px;\r\n    margin-bottom: 16px;\r\n}\r\n\r\n.ui-margin-3 {\r\n    margin-top: 24px;\r\n    margin-bottom: 24px;\r\n}\r\n\r\n.ui-margin-4 {\r\n    margin-top: 32px;\r\n    margin-bottom: 32px;\r\n}"],sourceRoot:""}]);const l=r},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i="",n=void 0!==e[5];return e[4]&&(i+="@supports (".concat(e[4],") {")),e[2]&&(i+="@media ".concat(e[2]," {")),n&&(i+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),i+=t(e),n&&(i+="}"),e[2]&&(i+="}"),e[4]&&(i+="}"),i})).join("")},e.i=function(t,i,n,s,o){"string"==typeof t&&(t=[[null,t,void 0]]);var r={};if(n)for(var l=0;l<this.length;l++){var a=this[l][0];null!=a&&(r[a]=!0)}for(var c=0;c<t.length;c++){var h=[].concat(t[c]);n&&r[h[0]]||(void 0!==o&&(void 0===h[5]||(h[1]="@layer".concat(h[5].length>0?" ".concat(h[5]):""," {").concat(h[1],"}")),h[5]=o),i&&(h[2]?(h[1]="@media ".concat(h[2]," {").concat(h[1],"}"),h[2]=i):h[2]=i),s&&(h[4]?(h[1]="@supports (".concat(h[4],") {").concat(h[1],"}"),h[4]=s):h[4]="".concat(s)),e.push(h))}},e}},537:t=>{t.exports=function(t){var e=t[1],i=t[3];if(!i)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),o="/*# ".concat(s," */"),r=i.sources.map((function(t){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(t," */")}));return[e].concat(r).concat([o]).join("\n")}return[e].join("\n")}},379:(t,e,i)=>{var n,s=function(){var t={};return function(e){if(void 0===t[e]){var i=document.querySelector(e);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}t[e]=i}return t[e]}}(),o=[];function r(t){for(var e=-1,i=0;i<o.length;i++)if(o[i].identifier===t){e=i;break}return e}function l(t,e){for(var i={},n=[],s=0;s<t.length;s++){var l=t[s],a=e.base?l[0]+e.base:l[0],c=i[a]||0,h="".concat(a," ").concat(c);i[a]=c+1;var d=r(h),u={css:l[1],media:l[2],sourceMap:l[3]};-1!==d?(o[d].references++,o[d].updater(u)):o.push({identifier:h,updater:m(u,e),references:1}),n.push(h)}return n}function a(t){var e=document.createElement("style"),n=t.attributes||{};if(void 0===n.nonce){var o=i.nc;o&&(n.nonce=o)}if(Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])})),"function"==typeof t.insert)t.insert(e);else{var r=s(t.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}return e}var c,h=(c=[],function(t,e){return c[t]=e,c.filter(Boolean).join("\n")});function d(t,e,i,n){var s=i?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(t.styleSheet)t.styleSheet.cssText=h(e,s);else{var o=document.createTextNode(s),r=t.childNodes;r[e]&&t.removeChild(r[e]),r.length?t.insertBefore(o,r[e]):t.appendChild(o)}}function u(t,e,i){var n=i.css,s=i.media,o=i.sourceMap;if(s?t.setAttribute("media",s):t.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}var p=null,f=0;function m(t,e){var i,n,s;if(e.singleton){var o=f++;i=p||(p=a(e)),n=d.bind(null,i,o,!1),s=d.bind(null,i,o,!0)}else i=a(e),n=u.bind(null,i,e),s=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(i)};return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else s()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n));var i=l(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var n=0;n<i.length;n++){var s=r(i[n]);o[s].references--}for(var a=l(t,e),c=0;c<i.length;c++){var h=r(i[c]);0===o[h].references&&(o[h].updater(),o.splice(h,1))}i=a}}}}},e={};function i(n){var s=e[n];if(void 0!==s)return s.exports;var o=e[n]={id:n,exports:{}};return t[n](o,o.exports,i),o.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),i.nc=void 0,(()=>{var t=i(379),e=i.n(t),n=i(772);e()(n.Z,{insert:"head",singleton:!1}),n.Z.locals;const s=window.ShadowRoot&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,o=Symbol(),r=new Map;class l{constructor(t,e){if(this._$cssResult$=!0,e!==o)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t}get styleSheet(){let t=r.get(this.cssText);return s&&void 0===t&&(r.set(this.cssText,t=new CSSStyleSheet),t.replaceSync(this.cssText)),t}toString(){return this.cssText}}const a=t=>new l("string"==typeof t?t:t+"",o),c=(t,...e)=>{const i=1===t.length?t[0]:e.reduce(((e,i,n)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(i)+t[n+1]),t[0]);return new l(i,o)},h=s?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const i of t.cssRules)e+=i.cssText;return a(e)})(t):t;var d;const u=window.trustedTypes,p=u?u.emptyScript:"",f=window.reactiveElementPolyfillSupport,m={toAttribute(t,e){switch(e){case Boolean:t=t?p:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let i=t;switch(e){case Boolean:i=null!==t;break;case Number:i=null===t?null:Number(t);break;case Object:case Array:try{i=JSON.parse(t)}catch(t){i=null}}return i}},g=(t,e)=>e!==t&&(e==e||t==t),v={attribute:!0,type:String,converter:m,reflect:!1,hasChanged:g};class b extends HTMLElement{constructor(){super(),this._$Et=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$Ei=null,this.o()}static addInitializer(t){var e;null!==(e=this.l)&&void 0!==e||(this.l=[]),this.l.push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,i)=>{const n=this._$Eh(i,e);void 0!==n&&(this._$Eu.set(n,i),t.push(n))})),t}static createProperty(t,e=v){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const i="symbol"==typeof t?Symbol():"__"+t,n=this.getPropertyDescriptor(t,i,e);void 0!==n&&Object.defineProperty(this.prototype,t,n)}}static getPropertyDescriptor(t,e,i){return{get(){return this[e]},set(n){const s=this[t];this[e]=n,this.requestUpdate(t,s,i)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||v}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),this.elementProperties=new Map(t.elementProperties),this._$Eu=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const i of e)this.createProperty(i,t[i])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const i=new Set(t.flat(1/0).reverse());for(const t of i)e.unshift(h(t))}else void 0!==t&&e.push(h(t));return e}static _$Eh(t,e){const i=e.attribute;return!1===i?void 0:"string"==typeof i?i:"string"==typeof t?t.toLowerCase():void 0}o(){var t;this._$Ep=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Em(),this.requestUpdate(),null===(t=this.constructor.l)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,i;(null!==(e=this._$Eg)&&void 0!==e?e:this._$Eg=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(i=t.hostConnected)||void 0===i||i.call(t))}removeController(t){var e;null===(e=this._$Eg)||void 0===e||e.splice(this._$Eg.indexOf(t)>>>0,1)}_$Em(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Et.set(e,this[e]),delete this[e])}))}createRenderRoot(){var t;const e=null!==(t=this.shadowRoot)&&void 0!==t?t:this.attachShadow(this.constructor.shadowRootOptions);return((t,e)=>{s?t.adoptedStyleSheets=e.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):e.forEach((e=>{const i=document.createElement("style"),n=window.litNonce;void 0!==n&&i.setAttribute("nonce",n),i.textContent=e.cssText,t.appendChild(i)}))})(e,this.constructor.elementStyles),e}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$Eg)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$Eg)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,i){this._$AK(t,i)}_$ES(t,e,i=v){var n,s;const o=this.constructor._$Eh(t,i);if(void 0!==o&&!0===i.reflect){const r=(null!==(s=null===(n=i.converter)||void 0===n?void 0:n.toAttribute)&&void 0!==s?s:m.toAttribute)(e,i.type);this._$Ei=t,null==r?this.removeAttribute(o):this.setAttribute(o,r),this._$Ei=null}}_$AK(t,e){var i,n,s;const o=this.constructor,r=o._$Eu.get(t);if(void 0!==r&&this._$Ei!==r){const t=o.getPropertyOptions(r),l=t.converter,a=null!==(s=null!==(n=null===(i=l)||void 0===i?void 0:i.fromAttribute)&&void 0!==n?n:"function"==typeof l?l:null)&&void 0!==s?s:m.fromAttribute;this._$Ei=r,this[r]=a(e,t.type),this._$Ei=null}}requestUpdate(t,e,i){let n=!0;void 0!==t&&(((i=i||this.constructor.getPropertyOptions(t)).hasChanged||g)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===i.reflect&&this._$Ei!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,i))):n=!1),!this.isUpdatePending&&n&&(this._$Ep=this._$E_())}async _$E_(){this.isUpdatePending=!0;try{await this._$Ep}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Et&&(this._$Et.forEach(((t,e)=>this[e]=t)),this._$Et=void 0);let e=!1;const i=this._$AL;try{e=this.shouldUpdate(i),e?(this.willUpdate(i),null===(t=this._$Eg)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(i)):this._$EU()}catch(t){throw e=!1,this._$EU(),t}e&&this._$AE(i)}willUpdate(t){}_$AE(t){var e;null===(e=this._$Eg)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$EU(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$Ep}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,e)=>this._$ES(e,this[e],t))),this._$EC=void 0),this._$EU()}updated(t){}firstUpdated(t){}}var A;b.finalized=!0,b.elementProperties=new Map,b.elementStyles=[],b.shadowRootOptions={mode:"open"},null==f||f({ReactiveElement:b}),(null!==(d=globalThis.reactiveElementVersions)&&void 0!==d?d:globalThis.reactiveElementVersions=[]).push("1.3.2");const y=globalThis.trustedTypes,x=y?y.createPolicy("lit-html",{createHTML:t=>t}):void 0,$=`lit$${(Math.random()+"").slice(9)}$`,_="?"+$,w=`<${_}>`,C=document,E=(t="")=>C.createComment(t),S=t=>null===t||"object"!=typeof t&&"function"!=typeof t,P=Array.isArray,R=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,B=/-->/g,O=/>/g,U=/>|[ 	\n\r](?:([^\s"'>=/]+)([ 	\n\r]*=[ 	\n\r]*(?:[^ 	\n\r"'`<>=]|("|')|))|$)/g,T=/'/g,I=/"/g,j=/^(?:script|style|textarea|title)$/i,k=t=>(e,...i)=>({_$litType$:t,strings:e,values:i}),H=k(1),M=(k(2),Symbol.for("lit-noChange")),N=Symbol.for("lit-nothing"),z=new WeakMap,D=C.createTreeWalker(C,129,null,!1),L=(t,e)=>{const i=t.length-1,n=[];let s,o=2===e?"<svg>":"",r=R;for(let e=0;e<i;e++){const i=t[e];let l,a,c=-1,h=0;for(;h<i.length&&(r.lastIndex=h,a=r.exec(i),null!==a);)h=r.lastIndex,r===R?"!--"===a[1]?r=B:void 0!==a[1]?r=O:void 0!==a[2]?(j.test(a[2])&&(s=RegExp("</"+a[2],"g")),r=U):void 0!==a[3]&&(r=U):r===U?">"===a[0]?(r=null!=s?s:R,c=-1):void 0===a[1]?c=-2:(c=r.lastIndex-a[2].length,l=a[1],r=void 0===a[3]?U:'"'===a[3]?I:T):r===I||r===T?r=U:r===B||r===O?r=R:(r=U,s=void 0);const d=r===U&&t[e+1].startsWith("/>")?" ":"";o+=r===R?i+w:c>=0?(n.push(l),i.slice(0,c)+"$lit$"+i.slice(c)+$+d):i+$+(-2===c?(n.push(void 0),e):d)}const l=o+(t[i]||"<?>")+(2===e?"</svg>":"");if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==x?x.createHTML(l):l,n]};class V{constructor({strings:t,_$litType$:e},i){let n;this.parts=[];let s=0,o=0;const r=t.length-1,l=this.parts,[a,c]=L(t,e);if(this.el=V.createElement(a,i),D.currentNode=this.el.content,2===e){const t=this.el.content,e=t.firstChild;e.remove(),t.append(...e.childNodes)}for(;null!==(n=D.nextNode())&&l.length<r;){if(1===n.nodeType){if(n.hasAttributes()){const t=[];for(const e of n.getAttributeNames())if(e.endsWith("$lit$")||e.startsWith($)){const i=c[o++];if(t.push(e),void 0!==i){const t=n.getAttribute(i.toLowerCase()+"$lit$").split($),e=/([.?@])?(.*)/.exec(i);l.push({type:1,index:s,name:e[2],strings:t,ctor:"."===e[1]?F:"?"===e[1]?G:"@"===e[1]?Q:J})}else l.push({type:6,index:s})}for(const e of t)n.removeAttribute(e)}if(j.test(n.tagName)){const t=n.textContent.split($),e=t.length-1;if(e>0){n.textContent=y?y.emptyScript:"";for(let i=0;i<e;i++)n.append(t[i],E()),D.nextNode(),l.push({type:2,index:++s});n.append(t[e],E())}}}else if(8===n.nodeType)if(n.data===_)l.push({type:2,index:s});else{let t=-1;for(;-1!==(t=n.data.indexOf($,t+1));)l.push({type:7,index:s}),t+=$.length-1}s++}}static createElement(t,e){const i=C.createElement("template");return i.innerHTML=t,i}}function W(t,e,i=t,n){var s,o,r,l;if(e===M)return e;let a=void 0!==n?null===(s=i._$Cl)||void 0===s?void 0:s[n]:i._$Cu;const c=S(e)?void 0:e._$litDirective$;return(null==a?void 0:a.constructor)!==c&&(null===(o=null==a?void 0:a._$AO)||void 0===o||o.call(a,!1),void 0===c?a=void 0:(a=new c(t),a._$AT(t,i,n)),void 0!==n?(null!==(r=(l=i)._$Cl)&&void 0!==r?r:l._$Cl=[])[n]=a:i._$Cu=a),void 0!==a&&(e=W(t,a._$AS(t,e.values),a,n)),e}class Z{constructor(t,e){this.v=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}p(t){var e;const{el:{content:i},parts:n}=this._$AD,s=(null!==(e=null==t?void 0:t.creationScope)&&void 0!==e?e:C).importNode(i,!0);D.currentNode=s;let o=D.nextNode(),r=0,l=0,a=n[0];for(;void 0!==a;){if(r===a.index){let e;2===a.type?e=new q(o,o.nextSibling,this,t):1===a.type?e=new a.ctor(o,a.name,a.strings,this,t):6===a.type&&(e=new X(o,this,t)),this.v.push(e),a=n[++l]}r!==(null==a?void 0:a.index)&&(o=D.nextNode(),r++)}return s}m(t){let e=0;for(const i of this.v)void 0!==i&&(void 0!==i.strings?(i._$AI(t,i,e),e+=i.strings.length-2):i._$AI(t[e])),e++}}class q{constructor(t,e,i,n){var s;this.type=2,this._$AH=N,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=i,this.options=n,this._$Cg=null===(s=null==n?void 0:n.isConnected)||void 0===s||s}get _$AU(){var t,e;return null!==(e=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==e?e:this._$Cg}get parentNode(){let t=this._$AA.parentNode;const e=this._$AM;return void 0!==e&&11===t.nodeType&&(t=e.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=W(this,t,e),S(t)?t===N||null==t||""===t?(this._$AH!==N&&this._$AR(),this._$AH=N):t!==this._$AH&&t!==M&&this.$(t):void 0!==t._$litType$?this.T(t):void 0!==t.nodeType?this.k(t):(t=>{var e;return P(t)||"function"==typeof(null===(e=t)||void 0===e?void 0:e[Symbol.iterator])})(t)?this.S(t):this.$(t)}M(t,e=this._$AB){return this._$AA.parentNode.insertBefore(t,e)}k(t){this._$AH!==t&&(this._$AR(),this._$AH=this.M(t))}$(t){this._$AH!==N&&S(this._$AH)?this._$AA.nextSibling.data=t:this.k(C.createTextNode(t)),this._$AH=t}T(t){var e;const{values:i,_$litType$:n}=t,s="number"==typeof n?this._$AC(t):(void 0===n.el&&(n.el=V.createElement(n.h,this.options)),n);if((null===(e=this._$AH)||void 0===e?void 0:e._$AD)===s)this._$AH.m(i);else{const t=new Z(s,this),e=t.p(this.options);t.m(i),this.k(e),this._$AH=t}}_$AC(t){let e=z.get(t.strings);return void 0===e&&z.set(t.strings,e=new V(t)),e}S(t){P(this._$AH)||(this._$AH=[],this._$AR());const e=this._$AH;let i,n=0;for(const s of t)n===e.length?e.push(i=new q(this.M(E()),this.M(E()),this,this.options)):i=e[n],i._$AI(s),n++;n<e.length&&(this._$AR(i&&i._$AB.nextSibling,n),e.length=n)}_$AR(t=this._$AA.nextSibling,e){var i;for(null===(i=this._$AP)||void 0===i||i.call(this,!1,!0,e);t&&t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){var e;void 0===this._$AM&&(this._$Cg=t,null===(e=this._$AP)||void 0===e||e.call(this,t))}}class J{constructor(t,e,i,n,s){this.type=1,this._$AH=N,this._$AN=void 0,this.element=t,this.name=e,this._$AM=n,this.options=s,i.length>2||""!==i[0]||""!==i[1]?(this._$AH=Array(i.length-1).fill(new String),this.strings=i):this._$AH=N}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,e=this,i,n){const s=this.strings;let o=!1;if(void 0===s)t=W(this,t,e,0),o=!S(t)||t!==this._$AH&&t!==M,o&&(this._$AH=t);else{const n=t;let r,l;for(t=s[0],r=0;r<s.length-1;r++)l=W(this,n[i+r],e,r),l===M&&(l=this._$AH[r]),o||(o=!S(l)||l!==this._$AH[r]),l===N?t=N:t!==N&&(t+=(null!=l?l:"")+s[r+1]),this._$AH[r]=l}o&&!n&&this.C(t)}C(t){t===N?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"")}}class F extends J{constructor(){super(...arguments),this.type=3}C(t){this.element[this.name]=t===N?void 0:t}}const K=y?y.emptyScript:"";class G extends J{constructor(){super(...arguments),this.type=4}C(t){t&&t!==N?this.element.setAttribute(this.name,K):this.element.removeAttribute(this.name)}}class Q extends J{constructor(t,e,i,n,s){super(t,e,i,n,s),this.type=5}_$AI(t,e=this){var i;if((t=null!==(i=W(this,t,e,0))&&void 0!==i?i:N)===M)return;const n=this._$AH,s=t===N&&n!==N||t.capture!==n.capture||t.once!==n.once||t.passive!==n.passive,o=t!==N&&(n===N||s);s&&this.element.removeEventListener(this.name,this,n),o&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var e,i;"function"==typeof this._$AH?this._$AH.call(null!==(i=null===(e=this.options)||void 0===e?void 0:e.host)&&void 0!==i?i:this.element,t):this._$AH.handleEvent(t)}}class X{constructor(t,e,i){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=i}get _$AU(){return this._$AM._$AU}_$AI(t){W(this,t)}}const Y=window.litHtmlPolyfillSupport;var tt,et;null==Y||Y(V,q),(null!==(A=globalThis.litHtmlVersions)&&void 0!==A?A:globalThis.litHtmlVersions=[]).push("2.2.5");class it extends b{constructor(){super(...arguments),this.renderOptions={host:this},this._$Dt=void 0}createRenderRoot(){var t,e;const i=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=i.firstChild),i}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Dt=((t,e,i)=>{var n,s;const o=null!==(n=null==i?void 0:i.renderBefore)&&void 0!==n?n:e;let r=o._$litPart$;if(void 0===r){const t=null!==(s=null==i?void 0:i.renderBefore)&&void 0!==s?s:null;o._$litPart$=r=new q(e.insertBefore(E(),t),t,void 0,null!=i?i:{})}return r._$AI(t),r})(e,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Dt)||void 0===t||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Dt)||void 0===t||t.setConnected(!1)}render(){return M}}it.finalized=!0,it._$litElement$=!0,null===(tt=globalThis.litElementHydrateSupport)||void 0===tt||tt.call(globalThis,{LitElement:it});const nt=globalThis.litElementPolyfillSupport;null==nt||nt({LitElement:it}),(null!==(et=globalThis.litElementVersions)&&void 0!==et?et:globalThis.litElementVersions=[]).push("3.2.0");const st=t=>e=>"function"==typeof e?((t,e)=>(window.customElements.define(t,e),e))(t,e):((t,e)=>{const{kind:i,elements:n}=e;return{kind:i,elements:n,finisher(e){window.customElements.define(t,e)}}})(t,e),ot=(t,e)=>"method"===e.kind&&e.descriptor&&!("value"in e.descriptor)?{...e,finisher(i){i.createProperty(e.key,t)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:e.key,initializer(){"function"==typeof e.initializer&&(this[e.key]=e.initializer.call(this))},finisher(i){i.createProperty(e.key,t)}};function rt(t){return(e,i)=>void 0!==i?((t,e,i)=>{e.constructor.createProperty(i,t)})(t,e,i):ot(t,e)}var lt;null===(lt=window.HTMLSlotElement)||void 0===lt||lt.prototype.assignedElements;const at=i.p+"97bd373a3244cf8ce8b17f9fe200ab47.png",ct=i.p+"d6254e9bdaab159dc9ccb0ef3c8eccbc.png";var ht=function(t,e,i,n){var s,o=arguments.length,r=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(s=t[l])&&(r=(o<3?s(r):o>3?s(e,i,r):s(e,i))||r);return o>3&&r&&Object.defineProperty(e,i,r),r};let dt=class extends it{constructor(){super(...arguments),this.os="ios"}render(){return H`<a class="ui-app-button ui-app-button--${this.os}"></a>`}};dt.styles=c`
    .ui-app-button {
      display: inline-block;
    }

    .ui-app-button--ios {
      width: 158px;
      height: 54px;
      background: url(${a(at)});
    }

    .ui-app-button--android {
      width: 175px;
      height: 54px;
      background: url(${a(ct)});
    }
  `,ht([rt()],dt.prototype,"os",void 0),ht([rt()],dt.prototype,"link",void 0),dt=ht([st("ui-app-button")],dt);let ut=class extends it{render(){return H`<div class="ui-button"><slot></slot></div>`}};ut.styles=c`
    
  `,ut=function(t,e,i,n){var s,o=arguments.length,r=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(s=t[l])&&(r=(o<3?s(r):o>3?s(e,i,r):s(e,i))||r);return o>3&&r&&Object.defineProperty(e,i,r),r}([st("ui-button")],ut);let pt=class extends it{render(){return H`<slot></slot>`}};pt.styles=c`
    :host {
      box-shadow: 0 5px 15px rgb(0 0 0 / 8%);
      padding: 30px 30px;
      display: block;
    }

    :host-context([match]) {
      flex: auto;
    }
  `,pt=function(t,e,i,n){var s,o=arguments.length,r=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(s=t[l])&&(r=(o<3?s(r):o>3?s(e,i,r):s(e,i))||r);return o>3&&r&&Object.defineProperty(e,i,r),r}([st("ui-card")],pt);let ft=class extends it{render(){return H`<div class="ui-container"><slot></slot></div>`}};ft.styles=c`
    .ui-container {
        max-width: 1200px;
        margin-left: auto;
        margin-right: auto;
        padding-left: 15px;
        padding-right: 15px;
    }

    @media (min-width: 640px) {
        .ui-container {
            padding-left: 30px;
            padding-right: 30px;
        }
    }

    @media (min-width: 960px) {
        .ui-container {
            padding-left: 40px;
            padding-right: 40px;
        }
    }
  `,ft=function(t,e,i,n){var s,o=arguments.length,r=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(s=t[l])&&(r=(o<3?s(r):o>3?s(e,i,r):s(e,i))||r);return o>3&&r&&Object.defineProperty(e,i,r),r}([st("ui-container")],ft);let mt=class extends it{render(){return H`<slot></slot>`}};mt.styles=c`
    :host([container]) {
      display: flex;
      width: 100%;
      justify-content: space-between;
      flex-wrap: wrap;
      margin: 0;
      margin-left: -30px;
      padding: 0;
      list-style: none;
      box-sizing: border-box;
    }

    :host([container][match]) ::slotted(ui-grid[item]) {
      display: flex;
    }

    :host([item]) {
      flex: 1 1 100%;
      padding-left: 30px;
      box-sizing: border-box;
    }

    @media (min-width: 480px) {
      :host([item][sm="1"]) {
        flex-basis: calc(100% / 12 * 1);
      }
      :host([item][sm="2"]) {
        flex-basis: calc(100% / 12 * 2);
      }
      :host([item][sm="3"]) {
        flex-basis: calc(100% / 12 * 3);
      }
      :host([item][sm="4"]) {
        flex-basis: calc(100% / 12 * 4);
      }
      :host([item][sm="5"]) {
        flex-basis: calc(100% / 12 * 5);
      }
      :host([item][sm="6"]) {
        flex-basis: calc(50%);
      }
      :host([item][sm="7"]) {
        flex-basis: calc(100% / 12 * 7);
      }
      :host([item][sm="8"]) {
        flex-basis: calc(100% / 12 * 8);
      }
      :host([item][sm="9"]) {
        flex-basis: calc(100% / 12 * 9);
      }
      :host([item][sm="10"]) {
        flex-basis: calc(100% / 12 * 10);
      }
      :host([item][sm="11"]) {
        flex-basis: calc(100% / 12 * 11);
      }
      :host([item][sm="12"]) {
        flex-basis: 100%;
      }
    }

    @media (min-width: 768px) {
      :host([item][md="1"]) {
        flex-basis: calc(100% / 12 * 1);
      }
      :host([item][md="2"]) {
        flex-basis: calc(100% / 12 * 2);
      }
      :host([item][md="3"]) {
        flex-basis: calc(100% / 12 * 3);
      }
      :host([item][md="4"]) {
        flex-basis: calc(100% / 12 * 4);
      }
      :host([item][md="5"]) {
        flex-basis: calc(100% / 12 * 5);
      }
      :host([item][md="6"]) {
        flex-basis: calc(50%);
      }
      :host([item][md="7"]) {
        flex-basis: calc(100% / 12 * 7);
      }
      :host([item][md="8"]) {
        flex-basis: calc(100% / 12 * 8);
      }
      :host([item][md="9"]) {
        flex-basis: calc(100% / 12 * 9);
      }
      :host([item][md="10"]) {
        flex-basis: calc(100% / 12 * 10);
      }
      :host([item][md="11"]) {
        flex-basis: calc(100% / 12 * 11);
      }
      :host([item][md="12"]) {
        flex-basis: 100%;
      }
    }

    @media (min-width: 960px) {
      :host([item][lg="1"]) {
        flex-basis: calc(100% / 12 * 1);
      }
      :host([item][lg="2"]) {
        flex-basis: calc(100% / 12 * 2);
      }
      :host([item][lg="3"]) {
        flex-basis: calc(100% / 12 * 3);
      }
      :host([item][lg="4"]) {
        flex-basis: calc(100% / 12 * 4);
      }
      :host([item][lg="5"]) {
        flex-basis: calc(100% / 12 * 5);
      }
      :host([item][lg="6"]) {
        flex-basis: calc(50%);
      }
      :host([item][lg="7"]) {
        flex-basis: calc(100% / 12 * 7);
      }
      :host([item][lg="8"]) {
        flex-basis: calc(100% / 12 * 8);
      }
      :host([item][lg="9"]) {
        flex-basis: calc(100% / 12 * 9);
      }
      :host([item][lg="10"]) {
        flex-basis: calc(100% / 12 * 10);
      }
      :host([item][lg="11"]) {
        flex-basis: calc(100% / 12 * 11);
      }
      :host([item][lg="12"]) {
        flex-basis: 100%;
      }
    }

    @media (min-width: 1200px) {
      :host([item][xl="1"]) {
        flex-basis: calc(100% / 12 * 1);
      }
      :host([item][xl="2"]) {
        flex-basis: calc(100% / 12 * 2);
      }
      :host([item][xl="3"]) {
        flex-basis: calc(100% / 12 * 3);
      }
      :host([item][xl="4"]) {
        flex-basis: calc(100% / 12 * 4);
      }
      :host([item][xl="5"]) {
        flex-basis: calc(100% / 12 * 5);
      }
      :host([item][xl="6"]) {
        flex-basis: calc(50%);
      }
      :host([item][xl="7"]) {
        flex-basis: calc(100% / 12 * 7);
      }
      :host([item][xl="8"]) {
        flex-basis: calc(100% / 12 * 8);
      }
      :host([item][xl="9"]) {
        flex-basis: calc(100% / 12 * 9);
      }
      :host([item][xl="10"]) {
        flex-basis: calc(100% / 12 * 10);
      }
      :host([item][xl="11"]) {
        flex-basis: calc(100% / 12 * 11);
      }
      :host([item][xl="12"]) {
        flex-basis: 100%;
      }
    }
  `,mt=function(t,e,i,n){var s,o=arguments.length,r=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(s=t[l])&&(r=(o<3?s(r):o>3?s(e,i,r):s(e,i))||r);return o>3&&r&&Object.defineProperty(e,i,r),r}([st("ui-grid")],mt);var gt=function(t,e,i,n){var s,o=arguments.length,r=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(s=t[l])&&(r=(o<3?s(r):o>3?s(e,i,r):s(e,i))||r);return o>3&&r&&Object.defineProperty(e,i,r),r};let vt=class extends it{constructor(){super(...arguments),this.variant="h1",this.component="div"}render(){let t=H`<div class="heading heading--${this.variant}">
      <slot></slot>
    </div>`;return"h1"===this.component?t=H`<h1 class="heading heading--${this.variant}">
        <slot></slot>
      </h1>`:"h2"===this.component?t=H`<h2 class="heading heading--${this.variant}">
        <slot></slot>
      </h2>`:"h3"===this.component?t=H`<h3 class="heading heading--${this.variant}">
        <slot></slot>
      </h3>`:"h4"===this.component&&(t=H`<h4 class="heading heading--${this.variant}">
        <slot></slot>
      </h4>`),t}};vt.styles=c`
    .heading {
      line-height: 1.2;
    }

    .heading--h1 {
      color: var(--ui-heading-font-color, var(--ui-base-font-color, inherit));
      font-size: 36px;
      font-weight: 400;
      font-family: var(
        --ui-heading-font-family,
        var(--ui-base-font-family, inherit)
      );
    }

    @media (min-width: 960px) {
      .heading--h1 {
        font-size: 42px;
      }
    }

    :host([light]) .heading {
      color: white;
    }

    .heading--h2 {
      color: var(--ui-heading-font-color, var(--ui-base-font-color, inherit));
      font-size: 24px;
      font-weight: 300;
    }

    .heading--h3 {
      color: var(--ui-heading-font-color, var(--ui-base-font-color, inherit));
      font-size: 20px;
      font-weight: 300;
    }

    .heading--h4 {
      color: var(--ui-heading-font-color, var(--ui-base-font-color, inherit));
      font-size: 12px;
      font-weight: bold;
    }
  `,gt([rt()],vt.prototype,"variant",void 0),gt([rt()],vt.prototype,"component",void 0),vt=gt([st("ui-heading")],vt);var bt=function(t,e,i,n){var s,o=arguments.length,r=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(s=t[l])&&(r=(o<3?s(r):o>3?s(e,i,r):s(e,i))||r);return o>3&&r&&Object.defineProperty(e,i,r),r};let At=class extends it{constructor(){super(...arguments),this.noPadding=!1,this.primary=!1}render(){return console.log(this.noPadding),H`<div class="ui-section ${this.noPadding?"ui-section--no-padding":""} ${this.primary?"ui-section--primary":""}">
      <slot></slot>
    </div>`}};At.styles=c`
    .ui-section {
      padding-top: 40px;
      padding-bottom: 40px;
      display: block;
    }

    @media (min-width: 960px) {
      .ui-section {
        padding-top: 70px;
        padding-bottom: 70px;
      }
    }

    .ui-section--no-padding {
      padding-top: 0;
      padding-bottom: 0;
    }

    .ui-section--primary {
      background-color: #f8f8f8;
    }
  `,bt([rt({type:Boolean})],At.prototype,"noPadding",void 0),bt([rt({type:Boolean})],At.prototype,"primary",void 0),At=bt([st("ui-section")],At);var yt=function(t,e,i,n){var s,o=arguments.length,r=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,n);else for(var l=t.length-1;l>=0;l--)(s=t[l])&&(r=(o<3?s(r):o>3?s(e,i,r):s(e,i))||r);return o>3&&r&&Object.defineProperty(e,i,r),r};let xt=class extends it{render(){return H`<div
      class="ui-hero"
      style="background-image: url(${this.background})"
    >
      <ui-section nopadding>
        <ui-container>
          <ui-grid container class="ui-hero__container">
            <ui-grid item md="6">
              <slot name="heading"></slot>
              <slot name="text"></slot>
              <slot name="actions"></slot>
            </ui-grid>
            <ui-grid item md="6" class="ui-hero__image">
              <slot name="image"></slot>
            </ui-grid>
          </ui-grid>
        </ui-container>
      </ui-section>
    </div>`}};xt.styles=c`
    .ui-hero {
      background-size: cover;
      height: 450px;
    }

    .ui-hero__container {
      height: 450px;
    }

    .ui-hero__image {
      text-align: center;
    }

    :host([light]) {
      color: white;
    }
  `,yt([rt()],xt.prototype,"background",void 0),xt=yt([st("ui-hero")],xt)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QnhCakMsU0FDRSxPQUFPLENBQUk7O3FDQUVzQnRWLEtBQUt3WDs7Ozs7Ozs7Ozs7Ozs7OztjQXpCakMsR0FBQXJMLE9BQVMsQ0FBRzs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFvQm5CLElBREMsd0NBcEJVb0wsR0FBSSxJQURoQixHQUFjLFlBQ0ZBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmFjaGVsb3ItdWkvLi9zcmMvc3R5bGVzL3N0eWxlcy5jc3MiLCJ3ZWJwYWNrOi8vYmFjaGVsb3ItdWkvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2JhY2hlbG9yLXVpLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vYmFjaGVsb3ItdWkvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vYmFjaGVsb3ItdWkvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vYmFjaGVsb3ItdWkvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vYmFjaGVsb3ItdWkvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2JhY2hlbG9yLXVpL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vYmFjaGVsb3ItdWkvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9iYWNoZWxvci11aS93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9iYWNoZWxvci11aS93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vYmFjaGVsb3ItdWkvLi9zcmMvc3R5bGVzL3N0eWxlcy5jc3M/ZTQ1YiIsIndlYnBhY2s6Ly9iYWNoZWxvci11aS8uL25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvY3NzLXRhZy5qcyIsIndlYnBhY2s6Ly9iYWNoZWxvci11aS8uL25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvcmVhY3RpdmUtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9iYWNoZWxvci11aS8uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saXQtaHRtbC5qcyIsIndlYnBhY2s6Ly9iYWNoZWxvci11aS8uL25vZGVfbW9kdWxlcy9saXQtZWxlbWVudC9saXQtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9iYWNoZWxvci11aS8uL25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9jdXN0b20tZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9iYWNoZWxvci11aS8uL25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9iYWNoZWxvci11aS8uL25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9xdWVyeS1hc3NpZ25lZC1lbGVtZW50cy5qcyIsIndlYnBhY2s6Ly9iYWNoZWxvci11aS8uL3NyYy9jb21wb25lbnRzL2FwcC1idXR0b24vYXBwc3RvcmUucG5nIiwid2VicGFjazovL2JhY2hlbG9yLXVpLy4vc3JjL2NvbXBvbmVudHMvYXBwLWJ1dHRvbi9wbGF5c3RvcmUucG5nIiwid2VicGFjazovL2JhY2hlbG9yLXVpLy4vc3JjL2NvbXBvbmVudHMvYXBwLWJ1dHRvbi9BcHBCdXR0b24udHMiLCJ3ZWJwYWNrOi8vYmFjaGVsb3ItdWkvLi9zcmMvY29tcG9uZW50cy9idXR0b24vQnV0dG9uLnRzIiwid2VicGFjazovL2JhY2hlbG9yLXVpLy4vc3JjL2NvbXBvbmVudHMvY2FyZC9DYXJkLnRzIiwid2VicGFjazovL2JhY2hlbG9yLXVpLy4vc3JjL2NvbXBvbmVudHMvY29udGFpbmVyL0NvbnRhaW5lci50cyIsIndlYnBhY2s6Ly9iYWNoZWxvci11aS8uL3NyYy9jb21wb25lbnRzL2dyaWQvR3JpZC50cyIsIndlYnBhY2s6Ly9iYWNoZWxvci11aS8uL3NyYy9jb21wb25lbnRzL2hlYWRpbmcvSGVhZGluZy50cyIsIndlYnBhY2s6Ly9iYWNoZWxvci11aS8uL3NyYy9jb21wb25lbnRzL3NlY3Rpb24vU2VjdGlvbi50cyIsIndlYnBhY2s6Ly9iYWNoZWxvci11aS8uL3NyYy9jb21wb25lbnRzL2hlcm8vSGVyby50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PVJvYm90bzp3Z2h0QDMwMDs0MDA7NzAwJmRpc3BsYXk9c3dhcCk7XCJdKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIjpyb290IHtcXHJcXG4gICAgLS11aS1iYXNlLWZvbnQtY29sb3I6ICMzMzMzMzM7XFxyXFxuICAgIC0tdWktYmFzZS1mb250LWZhbWlseTogUm9ib3RvO1xcclxcbiAgICAtLXVpLWJhc2UtZm9udC1zaXplOiAxNnB4O1xcclxcblxcclxcbiAgICAtLXVpLWhlYWRpbmctZm9udC1jb2xvcjogdmFyKC0tdWktYmFzZS1mb250LWNvbG9yKTtcXHJcXG4gICAgLS11aS1oZWFkaW5nLWZvbnQtZmFtaWx5OiB2YXIoLS11aS1iYXNlLWZvbnQtZmFtaWx5KTtcXHJcXG59XFxyXFxuXFxyXFxuaHRtbCwgYm9keSB7XFxyXFxuICAgIGZvbnQtZmFtaWx5OiB2YXIoLS11aS1iYXNlLWZvbnQtZmFtaWx5KTtcXHJcXG4gICAgY29sb3I6IHZhcigtLXVpLWJhc2UtZm9udC1jb2xvcik7XFxyXFxuICAgIGZvbnQtc2l6ZTogdmFyKC0tdWktYmFzZS1mb250LXNpemUpO1xcclxcbiAgICBsaW5lLWhlaWdodDogMS41O1xcclxcbn1cXHJcXG5cXHJcXG4vKiBVVElMUyAqL1xcclxcblxcclxcbi51aS10ZXh0LWxlZnQge1xcclxcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xcclxcbn1cXHJcXG5cXHJcXG4udWktdGV4dC1jZW50ZXIge1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbi51aS10ZXh0LXJpZ2h0IHtcXHJcXG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XFxyXFxufVxcclxcblxcclxcbi51aS1tYXJnaW4tMSB7XFxyXFxuICAgIG1hcmdpbi10b3A6IDhweDtcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogOHB4O1xcclxcbn1cXHJcXG5cXHJcXG4udWktbWFyZ2luLTIge1xcclxcbiAgICBtYXJnaW4tdG9wOiAxNnB4O1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAxNnB4O1xcclxcbn1cXHJcXG5cXHJcXG4udWktbWFyZ2luLTMge1xcclxcbiAgICBtYXJnaW4tdG9wOiAyNHB4O1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAyNHB4O1xcclxcbn1cXHJcXG5cXHJcXG4udWktbWFyZ2luLTQge1xcclxcbiAgICBtYXJnaW4tdG9wOiAzMnB4O1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAzMnB4O1xcclxcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL3N0eWxlcy5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUE7SUFDSSw2QkFBNkI7SUFDN0IsNkJBQTZCO0lBQzdCLHlCQUF5Qjs7SUFFekIsa0RBQWtEO0lBQ2xELG9EQUFvRDtBQUN4RDs7QUFFQTtJQUNJLHVDQUF1QztJQUN2QyxnQ0FBZ0M7SUFDaEMsbUNBQW1DO0lBQ25DLGdCQUFnQjtBQUNwQjs7QUFFQSxVQUFVOztBQUVWO0lBQ0ksZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksZUFBZTtJQUNmLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLGdCQUFnQjtJQUNoQixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxnQkFBZ0I7SUFDaEIsbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLG1CQUFtQjtBQUN2QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1Sb2JvdG86d2dodEAzMDA7NDAwOzcwMCZkaXNwbGF5PXN3YXAnKTtcXHJcXG5cXHJcXG46cm9vdCB7XFxyXFxuICAgIC0tdWktYmFzZS1mb250LWNvbG9yOiAjMzMzMzMzO1xcclxcbiAgICAtLXVpLWJhc2UtZm9udC1mYW1pbHk6IFJvYm90bztcXHJcXG4gICAgLS11aS1iYXNlLWZvbnQtc2l6ZTogMTZweDtcXHJcXG5cXHJcXG4gICAgLS11aS1oZWFkaW5nLWZvbnQtY29sb3I6IHZhcigtLXVpLWJhc2UtZm9udC1jb2xvcik7XFxyXFxuICAgIC0tdWktaGVhZGluZy1mb250LWZhbWlseTogdmFyKC0tdWktYmFzZS1mb250LWZhbWlseSk7XFxyXFxufVxcclxcblxcclxcbmh0bWwsIGJvZHkge1xcclxcbiAgICBmb250LWZhbWlseTogdmFyKC0tdWktYmFzZS1mb250LWZhbWlseSk7XFxyXFxuICAgIGNvbG9yOiB2YXIoLS11aS1iYXNlLWZvbnQtY29sb3IpO1xcclxcbiAgICBmb250LXNpemU6IHZhcigtLXVpLWJhc2UtZm9udC1zaXplKTtcXHJcXG4gICAgbGluZS1oZWlnaHQ6IDEuNTtcXHJcXG59XFxyXFxuXFxyXFxuLyogVVRJTFMgKi9cXHJcXG5cXHJcXG4udWktdGV4dC1sZWZ0IHtcXHJcXG4gICAgdGV4dC1hbGlnbjogbGVmdDtcXHJcXG59XFxyXFxuXFxyXFxuLnVpLXRleHQtY2VudGVyIHtcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4udWktdGV4dC1yaWdodCB7XFxyXFxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xcclxcbn1cXHJcXG5cXHJcXG4udWktbWFyZ2luLTEge1xcclxcbiAgICBtYXJnaW4tdG9wOiA4cHg7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDhweDtcXHJcXG59XFxyXFxuXFxyXFxuLnVpLW1hcmdpbi0yIHtcXHJcXG4gICAgbWFyZ2luLXRvcDogMTZweDtcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogMTZweDtcXHJcXG59XFxyXFxuXFxyXFxuLnVpLW1hcmdpbi0zIHtcXHJcXG4gICAgbWFyZ2luLXRvcDogMjRweDtcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogMjRweDtcXHJcXG59XFxyXFxuXFxyXFxuLnVpLW1hcmdpbi00IHtcXHJcXG4gICAgbWFyZ2luLXRvcDogMzJweDtcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogMzJweDtcXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3TGlzdCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjXG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLmNzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3QgdD13aW5kb3cuU2hhZG93Um9vdCYmKHZvaWQgMD09PXdpbmRvdy5TaGFkeUNTU3x8d2luZG93LlNoYWR5Q1NTLm5hdGl2ZVNoYWRvdykmJlwiYWRvcHRlZFN0eWxlU2hlZXRzXCJpbiBEb2N1bWVudC5wcm90b3R5cGUmJlwicmVwbGFjZVwiaW4gQ1NTU3R5bGVTaGVldC5wcm90b3R5cGUsZT1TeW1ib2woKSxuPW5ldyBNYXA7Y2xhc3Mgc3tjb25zdHJ1Y3Rvcih0LG4pe2lmKHRoaXMuXyRjc3NSZXN1bHQkPSEwLG4hPT1lKXRocm93IEVycm9yKFwiQ1NTUmVzdWx0IGlzIG5vdCBjb25zdHJ1Y3RhYmxlLiBVc2UgYHVuc2FmZUNTU2Agb3IgYGNzc2AgaW5zdGVhZC5cIik7dGhpcy5jc3NUZXh0PXR9Z2V0IHN0eWxlU2hlZXQoKXtsZXQgZT1uLmdldCh0aGlzLmNzc1RleHQpO3JldHVybiB0JiZ2b2lkIDA9PT1lJiYobi5zZXQodGhpcy5jc3NUZXh0LGU9bmV3IENTU1N0eWxlU2hlZXQpLGUucmVwbGFjZVN5bmModGhpcy5jc3NUZXh0KSksZX10b1N0cmluZygpe3JldHVybiB0aGlzLmNzc1RleHR9fWNvbnN0IG89dD0+bmV3IHMoXCJzdHJpbmdcIj09dHlwZW9mIHQ/dDp0K1wiXCIsZSkscj0odCwuLi5uKT0+e2NvbnN0IG89MT09PXQubGVuZ3RoP3RbMF06bi5yZWR1Y2UoKChlLG4scyk9PmUrKHQ9PntpZighMD09PXQuXyRjc3NSZXN1bHQkKXJldHVybiB0LmNzc1RleHQ7aWYoXCJudW1iZXJcIj09dHlwZW9mIHQpcmV0dXJuIHQ7dGhyb3cgRXJyb3IoXCJWYWx1ZSBwYXNzZWQgdG8gJ2NzcycgZnVuY3Rpb24gbXVzdCBiZSBhICdjc3MnIGZ1bmN0aW9uIHJlc3VsdDogXCIrdCtcIi4gVXNlICd1bnNhZmVDU1MnIHRvIHBhc3Mgbm9uLWxpdGVyYWwgdmFsdWVzLCBidXQgdGFrZSBjYXJlIHRvIGVuc3VyZSBwYWdlIHNlY3VyaXR5LlwiKX0pKG4pK3RbcysxXSksdFswXSk7cmV0dXJuIG5ldyBzKG8sZSl9LGk9KGUsbik9Pnt0P2UuYWRvcHRlZFN0eWxlU2hlZXRzPW4ubWFwKCh0PT50IGluc3RhbmNlb2YgQ1NTU3R5bGVTaGVldD90OnQuc3R5bGVTaGVldCkpOm4uZm9yRWFjaCgodD0+e2NvbnN0IG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpLHM9d2luZG93LmxpdE5vbmNlO3ZvaWQgMCE9PXMmJm4uc2V0QXR0cmlidXRlKFwibm9uY2VcIixzKSxuLnRleHRDb250ZW50PXQuY3NzVGV4dCxlLmFwcGVuZENoaWxkKG4pfSkpfSxTPXQ/dD0+dDp0PT50IGluc3RhbmNlb2YgQ1NTU3R5bGVTaGVldD8odD0+e2xldCBlPVwiXCI7Zm9yKGNvbnN0IG4gb2YgdC5jc3NSdWxlcyllKz1uLmNzc1RleHQ7cmV0dXJuIG8oZSl9KSh0KTp0O2V4cG9ydHtzIGFzIENTU1Jlc3VsdCxpIGFzIGFkb3B0U3R5bGVzLHIgYXMgY3NzLFMgYXMgZ2V0Q29tcGF0aWJsZVN0eWxlLHQgYXMgc3VwcG9ydHNBZG9wdGluZ1N0eWxlU2hlZXRzLG8gYXMgdW5zYWZlQ1NTfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNzcy10YWcuanMubWFwXG4iLCJpbXBvcnR7Z2V0Q29tcGF0aWJsZVN0eWxlIGFzIHQsYWRvcHRTdHlsZXMgYXMgaX1mcm9tXCIuL2Nzcy10YWcuanNcIjtleHBvcnR7Q1NTUmVzdWx0LGFkb3B0U3R5bGVzLGNzcyxnZXRDb21wYXRpYmxlU3R5bGUsc3VwcG9ydHNBZG9wdGluZ1N0eWxlU2hlZXRzLHVuc2FmZUNTU31mcm9tXCIuL2Nzcy10YWcuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL3ZhciBzO2NvbnN0IGU9d2luZG93LnRydXN0ZWRUeXBlcyxyPWU/ZS5lbXB0eVNjcmlwdDpcIlwiLGg9d2luZG93LnJlYWN0aXZlRWxlbWVudFBvbHlmaWxsU3VwcG9ydCxvPXt0b0F0dHJpYnV0ZSh0LGkpe3N3aXRjaChpKXtjYXNlIEJvb2xlYW46dD10P3I6bnVsbDticmVhaztjYXNlIE9iamVjdDpjYXNlIEFycmF5OnQ9bnVsbD09dD90OkpTT04uc3RyaW5naWZ5KHQpfXJldHVybiB0fSxmcm9tQXR0cmlidXRlKHQsaSl7bGV0IHM9dDtzd2l0Y2goaSl7Y2FzZSBCb29sZWFuOnM9bnVsbCE9PXQ7YnJlYWs7Y2FzZSBOdW1iZXI6cz1udWxsPT09dD9udWxsOk51bWJlcih0KTticmVhaztjYXNlIE9iamVjdDpjYXNlIEFycmF5OnRyeXtzPUpTT04ucGFyc2UodCl9Y2F0Y2godCl7cz1udWxsfX1yZXR1cm4gc319LG49KHQsaSk9PmkhPT10JiYoaT09aXx8dD09dCksbD17YXR0cmlidXRlOiEwLHR5cGU6U3RyaW5nLGNvbnZlcnRlcjpvLHJlZmxlY3Q6ITEsaGFzQ2hhbmdlZDpufTtjbGFzcyBhIGV4dGVuZHMgSFRNTEVsZW1lbnR7Y29uc3RydWN0b3IoKXtzdXBlcigpLHRoaXMuXyRFdD1uZXcgTWFwLHRoaXMuaXNVcGRhdGVQZW5kaW5nPSExLHRoaXMuaGFzVXBkYXRlZD0hMSx0aGlzLl8kRWk9bnVsbCx0aGlzLm8oKX1zdGF0aWMgYWRkSW5pdGlhbGl6ZXIodCl7dmFyIGk7bnVsbCE9PShpPXRoaXMubCkmJnZvaWQgMCE9PWl8fCh0aGlzLmw9W10pLHRoaXMubC5wdXNoKHQpfXN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCl7dGhpcy5maW5hbGl6ZSgpO2NvbnN0IHQ9W107cmV0dXJuIHRoaXMuZWxlbWVudFByb3BlcnRpZXMuZm9yRWFjaCgoKGkscyk9Pntjb25zdCBlPXRoaXMuXyRFaChzLGkpO3ZvaWQgMCE9PWUmJih0aGlzLl8kRXUuc2V0KGUscyksdC5wdXNoKGUpKX0pKSx0fXN0YXRpYyBjcmVhdGVQcm9wZXJ0eSh0LGk9bCl7aWYoaS5zdGF0ZSYmKGkuYXR0cmlidXRlPSExKSx0aGlzLmZpbmFsaXplKCksdGhpcy5lbGVtZW50UHJvcGVydGllcy5zZXQodCxpKSwhaS5ub0FjY2Vzc29yJiYhdGhpcy5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkodCkpe2NvbnN0IHM9XCJzeW1ib2xcIj09dHlwZW9mIHQ/U3ltYm9sKCk6XCJfX1wiK3QsZT10aGlzLmdldFByb3BlcnR5RGVzY3JpcHRvcih0LHMsaSk7dm9pZCAwIT09ZSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMucHJvdG90eXBlLHQsZSl9fXN0YXRpYyBnZXRQcm9wZXJ0eURlc2NyaXB0b3IodCxpLHMpe3JldHVybntnZXQoKXtyZXR1cm4gdGhpc1tpXX0sc2V0KGUpe2NvbnN0IHI9dGhpc1t0XTt0aGlzW2ldPWUsdGhpcy5yZXF1ZXN0VXBkYXRlKHQscixzKX0sY29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITB9fXN0YXRpYyBnZXRQcm9wZXJ0eU9wdGlvbnModCl7cmV0dXJuIHRoaXMuZWxlbWVudFByb3BlcnRpZXMuZ2V0KHQpfHxsfXN0YXRpYyBmaW5hbGl6ZSgpe2lmKHRoaXMuaGFzT3duUHJvcGVydHkoXCJmaW5hbGl6ZWRcIikpcmV0dXJuITE7dGhpcy5maW5hbGl6ZWQ9ITA7Y29uc3QgdD1PYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcyk7aWYodC5maW5hbGl6ZSgpLHRoaXMuZWxlbWVudFByb3BlcnRpZXM9bmV3IE1hcCh0LmVsZW1lbnRQcm9wZXJ0aWVzKSx0aGlzLl8kRXU9bmV3IE1hcCx0aGlzLmhhc093blByb3BlcnR5KFwicHJvcGVydGllc1wiKSl7Y29uc3QgdD10aGlzLnByb3BlcnRpZXMsaT1bLi4uT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModCksLi4uT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0KV07Zm9yKGNvbnN0IHMgb2YgaSl0aGlzLmNyZWF0ZVByb3BlcnR5KHMsdFtzXSl9cmV0dXJuIHRoaXMuZWxlbWVudFN0eWxlcz10aGlzLmZpbmFsaXplU3R5bGVzKHRoaXMuc3R5bGVzKSwhMH1zdGF0aWMgZmluYWxpemVTdHlsZXMoaSl7Y29uc3Qgcz1bXTtpZihBcnJheS5pc0FycmF5KGkpKXtjb25zdCBlPW5ldyBTZXQoaS5mbGF0KDEvMCkucmV2ZXJzZSgpKTtmb3IoY29uc3QgaSBvZiBlKXMudW5zaGlmdCh0KGkpKX1lbHNlIHZvaWQgMCE9PWkmJnMucHVzaCh0KGkpKTtyZXR1cm4gc31zdGF0aWMgXyRFaCh0LGkpe2NvbnN0IHM9aS5hdHRyaWJ1dGU7cmV0dXJuITE9PT1zP3ZvaWQgMDpcInN0cmluZ1wiPT10eXBlb2Ygcz9zOlwic3RyaW5nXCI9PXR5cGVvZiB0P3QudG9Mb3dlckNhc2UoKTp2b2lkIDB9bygpe3ZhciB0O3RoaXMuXyRFcD1uZXcgUHJvbWlzZSgodD0+dGhpcy5lbmFibGVVcGRhdGluZz10KSksdGhpcy5fJEFMPW5ldyBNYXAsdGhpcy5fJEVtKCksdGhpcy5yZXF1ZXN0VXBkYXRlKCksbnVsbD09PSh0PXRoaXMuY29uc3RydWN0b3IubCl8fHZvaWQgMD09PXR8fHQuZm9yRWFjaCgodD0+dCh0aGlzKSkpfWFkZENvbnRyb2xsZXIodCl7dmFyIGksczsobnVsbCE9PShpPXRoaXMuXyRFZykmJnZvaWQgMCE9PWk/aTp0aGlzLl8kRWc9W10pLnB1c2godCksdm9pZCAwIT09dGhpcy5yZW5kZXJSb290JiZ0aGlzLmlzQ29ubmVjdGVkJiYobnVsbD09PShzPXQuaG9zdENvbm5lY3RlZCl8fHZvaWQgMD09PXN8fHMuY2FsbCh0KSl9cmVtb3ZlQ29udHJvbGxlcih0KXt2YXIgaTtudWxsPT09KGk9dGhpcy5fJEVnKXx8dm9pZCAwPT09aXx8aS5zcGxpY2UodGhpcy5fJEVnLmluZGV4T2YodCk+Pj4wLDEpfV8kRW0oKXt0aGlzLmNvbnN0cnVjdG9yLmVsZW1lbnRQcm9wZXJ0aWVzLmZvckVhY2goKCh0LGkpPT57dGhpcy5oYXNPd25Qcm9wZXJ0eShpKSYmKHRoaXMuXyRFdC5zZXQoaSx0aGlzW2ldKSxkZWxldGUgdGhpc1tpXSl9KSl9Y3JlYXRlUmVuZGVyUm9vdCgpe3ZhciB0O2NvbnN0IHM9bnVsbCE9PSh0PXRoaXMuc2hhZG93Um9vdCkmJnZvaWQgMCE9PXQ/dDp0aGlzLmF0dGFjaFNoYWRvdyh0aGlzLmNvbnN0cnVjdG9yLnNoYWRvd1Jvb3RPcHRpb25zKTtyZXR1cm4gaShzLHRoaXMuY29uc3RydWN0b3IuZWxlbWVudFN0eWxlcyksc31jb25uZWN0ZWRDYWxsYmFjaygpe3ZhciB0O3ZvaWQgMD09PXRoaXMucmVuZGVyUm9vdCYmKHRoaXMucmVuZGVyUm9vdD10aGlzLmNyZWF0ZVJlbmRlclJvb3QoKSksdGhpcy5lbmFibGVVcGRhdGluZyghMCksbnVsbD09PSh0PXRoaXMuXyRFZyl8fHZvaWQgMD09PXR8fHQuZm9yRWFjaCgodD0+e3ZhciBpO3JldHVybiBudWxsPT09KGk9dC5ob3N0Q29ubmVjdGVkKXx8dm9pZCAwPT09aT92b2lkIDA6aS5jYWxsKHQpfSkpfWVuYWJsZVVwZGF0aW5nKHQpe31kaXNjb25uZWN0ZWRDYWxsYmFjaygpe3ZhciB0O251bGw9PT0odD10aGlzLl8kRWcpfHx2b2lkIDA9PT10fHx0LmZvckVhY2goKHQ9Pnt2YXIgaTtyZXR1cm4gbnVsbD09PShpPXQuaG9zdERpc2Nvbm5lY3RlZCl8fHZvaWQgMD09PWk/dm9pZCAwOmkuY2FsbCh0KX0pKX1hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sodCxpLHMpe3RoaXMuXyRBSyh0LHMpfV8kRVModCxpLHM9bCl7dmFyIGUscjtjb25zdCBoPXRoaXMuY29uc3RydWN0b3IuXyRFaCh0LHMpO2lmKHZvaWQgMCE9PWgmJiEwPT09cy5yZWZsZWN0KXtjb25zdCBuPShudWxsIT09KHI9bnVsbD09PShlPXMuY29udmVydGVyKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS50b0F0dHJpYnV0ZSkmJnZvaWQgMCE9PXI/cjpvLnRvQXR0cmlidXRlKShpLHMudHlwZSk7dGhpcy5fJEVpPXQsbnVsbD09bj90aGlzLnJlbW92ZUF0dHJpYnV0ZShoKTp0aGlzLnNldEF0dHJpYnV0ZShoLG4pLHRoaXMuXyRFaT1udWxsfX1fJEFLKHQsaSl7dmFyIHMsZSxyO2NvbnN0IGg9dGhpcy5jb25zdHJ1Y3RvcixuPWguXyRFdS5nZXQodCk7aWYodm9pZCAwIT09biYmdGhpcy5fJEVpIT09bil7Y29uc3QgdD1oLmdldFByb3BlcnR5T3B0aW9ucyhuKSxsPXQuY29udmVydGVyLGE9bnVsbCE9PShyPW51bGwhPT0oZT1udWxsPT09KHM9bCl8fHZvaWQgMD09PXM/dm9pZCAwOnMuZnJvbUF0dHJpYnV0ZSkmJnZvaWQgMCE9PWU/ZTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBsP2w6bnVsbCkmJnZvaWQgMCE9PXI/cjpvLmZyb21BdHRyaWJ1dGU7dGhpcy5fJEVpPW4sdGhpc1tuXT1hKGksdC50eXBlKSx0aGlzLl8kRWk9bnVsbH19cmVxdWVzdFVwZGF0ZSh0LGkscyl7bGV0IGU9ITA7dm9pZCAwIT09dCYmKCgocz1zfHx0aGlzLmNvbnN0cnVjdG9yLmdldFByb3BlcnR5T3B0aW9ucyh0KSkuaGFzQ2hhbmdlZHx8bikodGhpc1t0XSxpKT8odGhpcy5fJEFMLmhhcyh0KXx8dGhpcy5fJEFMLnNldCh0LGkpLCEwPT09cy5yZWZsZWN0JiZ0aGlzLl8kRWkhPT10JiYodm9pZCAwPT09dGhpcy5fJEVDJiYodGhpcy5fJEVDPW5ldyBNYXApLHRoaXMuXyRFQy5zZXQodCxzKSkpOmU9ITEpLCF0aGlzLmlzVXBkYXRlUGVuZGluZyYmZSYmKHRoaXMuXyRFcD10aGlzLl8kRV8oKSl9YXN5bmMgXyRFXygpe3RoaXMuaXNVcGRhdGVQZW5kaW5nPSEwO3RyeXthd2FpdCB0aGlzLl8kRXB9Y2F0Y2godCl7UHJvbWlzZS5yZWplY3QodCl9Y29uc3QgdD10aGlzLnNjaGVkdWxlVXBkYXRlKCk7cmV0dXJuIG51bGwhPXQmJmF3YWl0IHQsIXRoaXMuaXNVcGRhdGVQZW5kaW5nfXNjaGVkdWxlVXBkYXRlKCl7cmV0dXJuIHRoaXMucGVyZm9ybVVwZGF0ZSgpfXBlcmZvcm1VcGRhdGUoKXt2YXIgdDtpZighdGhpcy5pc1VwZGF0ZVBlbmRpbmcpcmV0dXJuO3RoaXMuaGFzVXBkYXRlZCx0aGlzLl8kRXQmJih0aGlzLl8kRXQuZm9yRWFjaCgoKHQsaSk9PnRoaXNbaV09dCkpLHRoaXMuXyRFdD12b2lkIDApO2xldCBpPSExO2NvbnN0IHM9dGhpcy5fJEFMO3RyeXtpPXRoaXMuc2hvdWxkVXBkYXRlKHMpLGk/KHRoaXMud2lsbFVwZGF0ZShzKSxudWxsPT09KHQ9dGhpcy5fJEVnKXx8dm9pZCAwPT09dHx8dC5mb3JFYWNoKCh0PT57dmFyIGk7cmV0dXJuIG51bGw9PT0oaT10Lmhvc3RVcGRhdGUpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmNhbGwodCl9KSksdGhpcy51cGRhdGUocykpOnRoaXMuXyRFVSgpfWNhdGNoKHQpe3Rocm93IGk9ITEsdGhpcy5fJEVVKCksdH1pJiZ0aGlzLl8kQUUocyl9d2lsbFVwZGF0ZSh0KXt9XyRBRSh0KXt2YXIgaTtudWxsPT09KGk9dGhpcy5fJEVnKXx8dm9pZCAwPT09aXx8aS5mb3JFYWNoKCh0PT57dmFyIGk7cmV0dXJuIG51bGw9PT0oaT10Lmhvc3RVcGRhdGVkKXx8dm9pZCAwPT09aT92b2lkIDA6aS5jYWxsKHQpfSkpLHRoaXMuaGFzVXBkYXRlZHx8KHRoaXMuaGFzVXBkYXRlZD0hMCx0aGlzLmZpcnN0VXBkYXRlZCh0KSksdGhpcy51cGRhdGVkKHQpfV8kRVUoKXt0aGlzLl8kQUw9bmV3IE1hcCx0aGlzLmlzVXBkYXRlUGVuZGluZz0hMX1nZXQgdXBkYXRlQ29tcGxldGUoKXtyZXR1cm4gdGhpcy5nZXRVcGRhdGVDb21wbGV0ZSgpfWdldFVwZGF0ZUNvbXBsZXRlKCl7cmV0dXJuIHRoaXMuXyRFcH1zaG91bGRVcGRhdGUodCl7cmV0dXJuITB9dXBkYXRlKHQpe3ZvaWQgMCE9PXRoaXMuXyRFQyYmKHRoaXMuXyRFQy5mb3JFYWNoKCgodCxpKT0+dGhpcy5fJEVTKGksdGhpc1tpXSx0KSkpLHRoaXMuXyRFQz12b2lkIDApLHRoaXMuXyRFVSgpfXVwZGF0ZWQodCl7fWZpcnN0VXBkYXRlZCh0KXt9fWEuZmluYWxpemVkPSEwLGEuZWxlbWVudFByb3BlcnRpZXM9bmV3IE1hcCxhLmVsZW1lbnRTdHlsZXM9W10sYS5zaGFkb3dSb290T3B0aW9ucz17bW9kZTpcIm9wZW5cIn0sbnVsbD09aHx8aCh7UmVhY3RpdmVFbGVtZW50OmF9KSwobnVsbCE9PShzPWdsb2JhbFRoaXMucmVhY3RpdmVFbGVtZW50VmVyc2lvbnMpJiZ2b2lkIDAhPT1zP3M6Z2xvYmFsVGhpcy5yZWFjdGl2ZUVsZW1lbnRWZXJzaW9ucz1bXSkucHVzaChcIjEuMy4yXCIpO2V4cG9ydHthIGFzIFJlYWN0aXZlRWxlbWVudCxvIGFzIGRlZmF1bHRDb252ZXJ0ZXIsbiBhcyBub3RFcXVhbH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdGl2ZS1lbGVtZW50LmpzLm1hcFxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG52YXIgdDtjb25zdCBpPWdsb2JhbFRoaXMudHJ1c3RlZFR5cGVzLHM9aT9pLmNyZWF0ZVBvbGljeShcImxpdC1odG1sXCIse2NyZWF0ZUhUTUw6dD0+dH0pOnZvaWQgMCxlPWBsaXQkJHsoTWF0aC5yYW5kb20oKStcIlwiKS5zbGljZSg5KX0kYCxvPVwiP1wiK2Usbj1gPCR7b30+YCxsPWRvY3VtZW50LGg9KHQ9XCJcIik9PmwuY3JlYXRlQ29tbWVudCh0KSxyPXQ9Pm51bGw9PT10fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdCxkPUFycmF5LmlzQXJyYXksdT10PT57dmFyIGk7cmV0dXJuIGQodCl8fFwiZnVuY3Rpb25cIj09dHlwZW9mKG51bGw9PT0oaT10KXx8dm9pZCAwPT09aT92b2lkIDA6aVtTeW1ib2wuaXRlcmF0b3JdKX0sYz0vPCg/OighLS18XFwvW15hLXpBLVpdKXwoXFwvP1thLXpBLVpdW14+XFxzXSopfChcXC8/JCkpL2csdj0vLS0+L2csYT0vPi9nLGY9Lz58WyBcdFxcblxmXFxyXSg/OihbXlxcc1wiJz49L10rKShbIFx0XFxuXGZcXHJdKj1bIFx0XFxuXGZcXHJdKig/OlteIFx0XFxuXGZcXHJcIidgPD49XXwoXCJ8Jyl8KSl8JCkvZyxfPS8nL2csbT0vXCIvZyxnPS9eKD86c2NyaXB0fHN0eWxlfHRleHRhcmVhfHRpdGxlKSQvaSxwPXQ9PihpLC4uLnMpPT4oe18kbGl0VHlwZSQ6dCxzdHJpbmdzOmksdmFsdWVzOnN9KSwkPXAoMSkseT1wKDIpLGI9U3ltYm9sLmZvcihcImxpdC1ub0NoYW5nZVwiKSx3PVN5bWJvbC5mb3IoXCJsaXQtbm90aGluZ1wiKSxUPW5ldyBXZWFrTWFwLHg9KHQsaSxzKT0+e3ZhciBlLG87Y29uc3Qgbj1udWxsIT09KGU9bnVsbD09cz92b2lkIDA6cy5yZW5kZXJCZWZvcmUpJiZ2b2lkIDAhPT1lP2U6aTtsZXQgbD1uLl8kbGl0UGFydCQ7aWYodm9pZCAwPT09bCl7Y29uc3QgdD1udWxsIT09KG89bnVsbD09cz92b2lkIDA6cy5yZW5kZXJCZWZvcmUpJiZ2b2lkIDAhPT1vP286bnVsbDtuLl8kbGl0UGFydCQ9bD1uZXcgTihpLmluc2VydEJlZm9yZShoKCksdCksdCx2b2lkIDAsbnVsbCE9cz9zOnt9KX1yZXR1cm4gbC5fJEFJKHQpLGx9LEE9bC5jcmVhdGVUcmVlV2Fsa2VyKGwsMTI5LG51bGwsITEpLEM9KHQsaSk9Pntjb25zdCBvPXQubGVuZ3RoLTEsbD1bXTtsZXQgaCxyPTI9PT1pP1wiPHN2Zz5cIjpcIlwiLGQ9Yztmb3IobGV0IGk9MDtpPG87aSsrKXtjb25zdCBzPXRbaV07bGV0IG8sdSxwPS0xLCQ9MDtmb3IoOyQ8cy5sZW5ndGgmJihkLmxhc3RJbmRleD0kLHU9ZC5leGVjKHMpLG51bGwhPT11KTspJD1kLmxhc3RJbmRleCxkPT09Yz9cIiEtLVwiPT09dVsxXT9kPXY6dm9pZCAwIT09dVsxXT9kPWE6dm9pZCAwIT09dVsyXT8oZy50ZXN0KHVbMl0pJiYoaD1SZWdFeHAoXCI8L1wiK3VbMl0sXCJnXCIpKSxkPWYpOnZvaWQgMCE9PXVbM10mJihkPWYpOmQ9PT1mP1wiPlwiPT09dVswXT8oZD1udWxsIT1oP2g6YyxwPS0xKTp2b2lkIDA9PT11WzFdP3A9LTI6KHA9ZC5sYXN0SW5kZXgtdVsyXS5sZW5ndGgsbz11WzFdLGQ9dm9pZCAwPT09dVszXT9mOidcIic9PT11WzNdP206Xyk6ZD09PW18fGQ9PT1fP2Q9ZjpkPT09dnx8ZD09PWE/ZD1jOihkPWYsaD12b2lkIDApO2NvbnN0IHk9ZD09PWYmJnRbaSsxXS5zdGFydHNXaXRoKFwiLz5cIik/XCIgXCI6XCJcIjtyKz1kPT09Yz9zK246cD49MD8obC5wdXNoKG8pLHMuc2xpY2UoMCxwKStcIiRsaXQkXCIrcy5zbGljZShwKStlK3kpOnMrZSsoLTI9PT1wPyhsLnB1c2godm9pZCAwKSxpKTp5KX1jb25zdCB1PXIrKHRbb118fFwiPD8+XCIpKygyPT09aT9cIjwvc3ZnPlwiOlwiXCIpO2lmKCFBcnJheS5pc0FycmF5KHQpfHwhdC5oYXNPd25Qcm9wZXJ0eShcInJhd1wiKSl0aHJvdyBFcnJvcihcImludmFsaWQgdGVtcGxhdGUgc3RyaW5ncyBhcnJheVwiKTtyZXR1cm5bdm9pZCAwIT09cz9zLmNyZWF0ZUhUTUwodSk6dSxsXX07Y2xhc3MgRXtjb25zdHJ1Y3Rvcih7c3RyaW5nczp0LF8kbGl0VHlwZSQ6c30sbil7bGV0IGw7dGhpcy5wYXJ0cz1bXTtsZXQgcj0wLGQ9MDtjb25zdCB1PXQubGVuZ3RoLTEsYz10aGlzLnBhcnRzLFt2LGFdPUModCxzKTtpZih0aGlzLmVsPUUuY3JlYXRlRWxlbWVudCh2LG4pLEEuY3VycmVudE5vZGU9dGhpcy5lbC5jb250ZW50LDI9PT1zKXtjb25zdCB0PXRoaXMuZWwuY29udGVudCxpPXQuZmlyc3RDaGlsZDtpLnJlbW92ZSgpLHQuYXBwZW5kKC4uLmkuY2hpbGROb2Rlcyl9Zm9yKDtudWxsIT09KGw9QS5uZXh0Tm9kZSgpKSYmYy5sZW5ndGg8dTspe2lmKDE9PT1sLm5vZGVUeXBlKXtpZihsLmhhc0F0dHJpYnV0ZXMoKSl7Y29uc3QgdD1bXTtmb3IoY29uc3QgaSBvZiBsLmdldEF0dHJpYnV0ZU5hbWVzKCkpaWYoaS5lbmRzV2l0aChcIiRsaXQkXCIpfHxpLnN0YXJ0c1dpdGgoZSkpe2NvbnN0IHM9YVtkKytdO2lmKHQucHVzaChpKSx2b2lkIDAhPT1zKXtjb25zdCB0PWwuZ2V0QXR0cmlidXRlKHMudG9Mb3dlckNhc2UoKStcIiRsaXQkXCIpLnNwbGl0KGUpLGk9LyhbLj9AXSk/KC4qKS8uZXhlYyhzKTtjLnB1c2goe3R5cGU6MSxpbmRleDpyLG5hbWU6aVsyXSxzdHJpbmdzOnQsY3RvcjpcIi5cIj09PWlbMV0/TTpcIj9cIj09PWlbMV0/SDpcIkBcIj09PWlbMV0/STpTfSl9ZWxzZSBjLnB1c2goe3R5cGU6NixpbmRleDpyfSl9Zm9yKGNvbnN0IGkgb2YgdClsLnJlbW92ZUF0dHJpYnV0ZShpKX1pZihnLnRlc3QobC50YWdOYW1lKSl7Y29uc3QgdD1sLnRleHRDb250ZW50LnNwbGl0KGUpLHM9dC5sZW5ndGgtMTtpZihzPjApe2wudGV4dENvbnRlbnQ9aT9pLmVtcHR5U2NyaXB0OlwiXCI7Zm9yKGxldCBpPTA7aTxzO2krKylsLmFwcGVuZCh0W2ldLGgoKSksQS5uZXh0Tm9kZSgpLGMucHVzaCh7dHlwZToyLGluZGV4Oisrcn0pO2wuYXBwZW5kKHRbc10saCgpKX19fWVsc2UgaWYoOD09PWwubm9kZVR5cGUpaWYobC5kYXRhPT09byljLnB1c2goe3R5cGU6MixpbmRleDpyfSk7ZWxzZXtsZXQgdD0tMTtmb3IoOy0xIT09KHQ9bC5kYXRhLmluZGV4T2YoZSx0KzEpKTspYy5wdXNoKHt0eXBlOjcsaW5kZXg6cn0pLHQrPWUubGVuZ3RoLTF9cisrfX1zdGF0aWMgY3JlYXRlRWxlbWVudCh0LGkpe2NvbnN0IHM9bC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7cmV0dXJuIHMuaW5uZXJIVE1MPXQsc319ZnVuY3Rpb24gUCh0LGkscz10LGUpe3ZhciBvLG4sbCxoO2lmKGk9PT1iKXJldHVybiBpO2xldCBkPXZvaWQgMCE9PWU/bnVsbD09PShvPXMuXyRDbCl8fHZvaWQgMD09PW8/dm9pZCAwOm9bZV06cy5fJEN1O2NvbnN0IHU9cihpKT92b2lkIDA6aS5fJGxpdERpcmVjdGl2ZSQ7cmV0dXJuKG51bGw9PWQ/dm9pZCAwOmQuY29uc3RydWN0b3IpIT09dSYmKG51bGw9PT0obj1udWxsPT1kP3ZvaWQgMDpkLl8kQU8pfHx2b2lkIDA9PT1ufHxuLmNhbGwoZCwhMSksdm9pZCAwPT09dT9kPXZvaWQgMDooZD1uZXcgdSh0KSxkLl8kQVQodCxzLGUpKSx2b2lkIDAhPT1lPyhudWxsIT09KGw9KGg9cykuXyRDbCkmJnZvaWQgMCE9PWw/bDpoLl8kQ2w9W10pW2VdPWQ6cy5fJEN1PWQpLHZvaWQgMCE9PWQmJihpPVAodCxkLl8kQVModCxpLnZhbHVlcyksZCxlKSksaX1jbGFzcyBWe2NvbnN0cnVjdG9yKHQsaSl7dGhpcy52PVtdLHRoaXMuXyRBTj12b2lkIDAsdGhpcy5fJEFEPXQsdGhpcy5fJEFNPWl9Z2V0IHBhcmVudE5vZGUoKXtyZXR1cm4gdGhpcy5fJEFNLnBhcmVudE5vZGV9Z2V0IF8kQVUoKXtyZXR1cm4gdGhpcy5fJEFNLl8kQVV9cCh0KXt2YXIgaTtjb25zdHtlbDp7Y29udGVudDpzfSxwYXJ0czplfT10aGlzLl8kQUQsbz0obnVsbCE9PShpPW51bGw9PXQ/dm9pZCAwOnQuY3JlYXRpb25TY29wZSkmJnZvaWQgMCE9PWk/aTpsKS5pbXBvcnROb2RlKHMsITApO0EuY3VycmVudE5vZGU9bztsZXQgbj1BLm5leHROb2RlKCksaD0wLHI9MCxkPWVbMF07Zm9yKDt2b2lkIDAhPT1kOyl7aWYoaD09PWQuaW5kZXgpe2xldCBpOzI9PT1kLnR5cGU/aT1uZXcgTihuLG4ubmV4dFNpYmxpbmcsdGhpcyx0KToxPT09ZC50eXBlP2k9bmV3IGQuY3RvcihuLGQubmFtZSxkLnN0cmluZ3MsdGhpcyx0KTo2PT09ZC50eXBlJiYoaT1uZXcgTChuLHRoaXMsdCkpLHRoaXMudi5wdXNoKGkpLGQ9ZVsrK3JdfWghPT0obnVsbD09ZD92b2lkIDA6ZC5pbmRleCkmJihuPUEubmV4dE5vZGUoKSxoKyspfXJldHVybiBvfW0odCl7bGV0IGk9MDtmb3IoY29uc3QgcyBvZiB0aGlzLnYpdm9pZCAwIT09cyYmKHZvaWQgMCE9PXMuc3RyaW5ncz8ocy5fJEFJKHQscyxpKSxpKz1zLnN0cmluZ3MubGVuZ3RoLTIpOnMuXyRBSSh0W2ldKSksaSsrfX1jbGFzcyBOe2NvbnN0cnVjdG9yKHQsaSxzLGUpe3ZhciBvO3RoaXMudHlwZT0yLHRoaXMuXyRBSD13LHRoaXMuXyRBTj12b2lkIDAsdGhpcy5fJEFBPXQsdGhpcy5fJEFCPWksdGhpcy5fJEFNPXMsdGhpcy5vcHRpb25zPWUsdGhpcy5fJENnPW51bGw9PT0obz1udWxsPT1lP3ZvaWQgMDplLmlzQ29ubmVjdGVkKXx8dm9pZCAwPT09b3x8b31nZXQgXyRBVSgpe3ZhciB0LGk7cmV0dXJuIG51bGwhPT0oaT1udWxsPT09KHQ9dGhpcy5fJEFNKXx8dm9pZCAwPT09dD92b2lkIDA6dC5fJEFVKSYmdm9pZCAwIT09aT9pOnRoaXMuXyRDZ31nZXQgcGFyZW50Tm9kZSgpe2xldCB0PXRoaXMuXyRBQS5wYXJlbnROb2RlO2NvbnN0IGk9dGhpcy5fJEFNO3JldHVybiB2b2lkIDAhPT1pJiYxMT09PXQubm9kZVR5cGUmJih0PWkucGFyZW50Tm9kZSksdH1nZXQgc3RhcnROb2RlKCl7cmV0dXJuIHRoaXMuXyRBQX1nZXQgZW5kTm9kZSgpe3JldHVybiB0aGlzLl8kQUJ9XyRBSSh0LGk9dGhpcyl7dD1QKHRoaXMsdCxpKSxyKHQpP3Q9PT13fHxudWxsPT10fHxcIlwiPT09dD8odGhpcy5fJEFIIT09dyYmdGhpcy5fJEFSKCksdGhpcy5fJEFIPXcpOnQhPT10aGlzLl8kQUgmJnQhPT1iJiZ0aGlzLiQodCk6dm9pZCAwIT09dC5fJGxpdFR5cGUkP3RoaXMuVCh0KTp2b2lkIDAhPT10Lm5vZGVUeXBlP3RoaXMuayh0KTp1KHQpP3RoaXMuUyh0KTp0aGlzLiQodCl9TSh0LGk9dGhpcy5fJEFCKXtyZXR1cm4gdGhpcy5fJEFBLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHQsaSl9ayh0KXt0aGlzLl8kQUghPT10JiYodGhpcy5fJEFSKCksdGhpcy5fJEFIPXRoaXMuTSh0KSl9JCh0KXt0aGlzLl8kQUghPT13JiZyKHRoaXMuXyRBSCk/dGhpcy5fJEFBLm5leHRTaWJsaW5nLmRhdGE9dDp0aGlzLmsobC5jcmVhdGVUZXh0Tm9kZSh0KSksdGhpcy5fJEFIPXR9VCh0KXt2YXIgaTtjb25zdHt2YWx1ZXM6cyxfJGxpdFR5cGUkOmV9PXQsbz1cIm51bWJlclwiPT10eXBlb2YgZT90aGlzLl8kQUModCk6KHZvaWQgMD09PWUuZWwmJihlLmVsPUUuY3JlYXRlRWxlbWVudChlLmgsdGhpcy5vcHRpb25zKSksZSk7aWYoKG51bGw9PT0oaT10aGlzLl8kQUgpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLl8kQUQpPT09byl0aGlzLl8kQUgubShzKTtlbHNle2NvbnN0IHQ9bmV3IFYobyx0aGlzKSxpPXQucCh0aGlzLm9wdGlvbnMpO3QubShzKSx0aGlzLmsoaSksdGhpcy5fJEFIPXR9fV8kQUModCl7bGV0IGk9VC5nZXQodC5zdHJpbmdzKTtyZXR1cm4gdm9pZCAwPT09aSYmVC5zZXQodC5zdHJpbmdzLGk9bmV3IEUodCkpLGl9Uyh0KXtkKHRoaXMuXyRBSCl8fCh0aGlzLl8kQUg9W10sdGhpcy5fJEFSKCkpO2NvbnN0IGk9dGhpcy5fJEFIO2xldCBzLGU9MDtmb3IoY29uc3QgbyBvZiB0KWU9PT1pLmxlbmd0aD9pLnB1c2gocz1uZXcgTih0aGlzLk0oaCgpKSx0aGlzLk0oaCgpKSx0aGlzLHRoaXMub3B0aW9ucykpOnM9aVtlXSxzLl8kQUkobyksZSsrO2U8aS5sZW5ndGgmJih0aGlzLl8kQVIocyYmcy5fJEFCLm5leHRTaWJsaW5nLGUpLGkubGVuZ3RoPWUpfV8kQVIodD10aGlzLl8kQUEubmV4dFNpYmxpbmcsaSl7dmFyIHM7Zm9yKG51bGw9PT0ocz10aGlzLl8kQVApfHx2b2lkIDA9PT1zfHxzLmNhbGwodGhpcywhMSwhMCxpKTt0JiZ0IT09dGhpcy5fJEFCOyl7Y29uc3QgaT10Lm5leHRTaWJsaW5nO3QucmVtb3ZlKCksdD1pfX1zZXRDb25uZWN0ZWQodCl7dmFyIGk7dm9pZCAwPT09dGhpcy5fJEFNJiYodGhpcy5fJENnPXQsbnVsbD09PShpPXRoaXMuXyRBUCl8fHZvaWQgMD09PWl8fGkuY2FsbCh0aGlzLHQpKX19Y2xhc3MgU3tjb25zdHJ1Y3Rvcih0LGkscyxlLG8pe3RoaXMudHlwZT0xLHRoaXMuXyRBSD13LHRoaXMuXyRBTj12b2lkIDAsdGhpcy5lbGVtZW50PXQsdGhpcy5uYW1lPWksdGhpcy5fJEFNPWUsdGhpcy5vcHRpb25zPW8scy5sZW5ndGg+Mnx8XCJcIiE9PXNbMF18fFwiXCIhPT1zWzFdPyh0aGlzLl8kQUg9QXJyYXkocy5sZW5ndGgtMSkuZmlsbChuZXcgU3RyaW5nKSx0aGlzLnN0cmluZ3M9cyk6dGhpcy5fJEFIPXd9Z2V0IHRhZ05hbWUoKXtyZXR1cm4gdGhpcy5lbGVtZW50LnRhZ05hbWV9Z2V0IF8kQVUoKXtyZXR1cm4gdGhpcy5fJEFNLl8kQVV9XyRBSSh0LGk9dGhpcyxzLGUpe2NvbnN0IG89dGhpcy5zdHJpbmdzO2xldCBuPSExO2lmKHZvaWQgMD09PW8pdD1QKHRoaXMsdCxpLDApLG49IXIodCl8fHQhPT10aGlzLl8kQUgmJnQhPT1iLG4mJih0aGlzLl8kQUg9dCk7ZWxzZXtjb25zdCBlPXQ7bGV0IGwsaDtmb3IodD1vWzBdLGw9MDtsPG8ubGVuZ3RoLTE7bCsrKWg9UCh0aGlzLGVbcytsXSxpLGwpLGg9PT1iJiYoaD10aGlzLl8kQUhbbF0pLG58fChuPSFyKGgpfHxoIT09dGhpcy5fJEFIW2xdKSxoPT09dz90PXc6dCE9PXcmJih0Kz0obnVsbCE9aD9oOlwiXCIpK29bbCsxXSksdGhpcy5fJEFIW2xdPWh9biYmIWUmJnRoaXMuQyh0KX1DKHQpe3Q9PT13P3RoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUodGhpcy5uYW1lKTp0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMubmFtZSxudWxsIT10P3Q6XCJcIil9fWNsYXNzIE0gZXh0ZW5kcyBTe2NvbnN0cnVjdG9yKCl7c3VwZXIoLi4uYXJndW1lbnRzKSx0aGlzLnR5cGU9M31DKHQpe3RoaXMuZWxlbWVudFt0aGlzLm5hbWVdPXQ9PT13P3ZvaWQgMDp0fX1jb25zdCBrPWk/aS5lbXB0eVNjcmlwdDpcIlwiO2NsYXNzIEggZXh0ZW5kcyBTe2NvbnN0cnVjdG9yKCl7c3VwZXIoLi4uYXJndW1lbnRzKSx0aGlzLnR5cGU9NH1DKHQpe3QmJnQhPT13P3RoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUodGhpcy5uYW1lLGspOnRoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUodGhpcy5uYW1lKX19Y2xhc3MgSSBleHRlbmRzIFN7Y29uc3RydWN0b3IodCxpLHMsZSxvKXtzdXBlcih0LGkscyxlLG8pLHRoaXMudHlwZT01fV8kQUkodCxpPXRoaXMpe3ZhciBzO2lmKCh0PW51bGwhPT0ocz1QKHRoaXMsdCxpLDApKSYmdm9pZCAwIT09cz9zOncpPT09YilyZXR1cm47Y29uc3QgZT10aGlzLl8kQUgsbz10PT09dyYmZSE9PXd8fHQuY2FwdHVyZSE9PWUuY2FwdHVyZXx8dC5vbmNlIT09ZS5vbmNlfHx0LnBhc3NpdmUhPT1lLnBhc3NpdmUsbj10IT09dyYmKGU9PT13fHxvKTtvJiZ0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLm5hbWUsdGhpcyxlKSxuJiZ0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLm5hbWUsdGhpcyx0KSx0aGlzLl8kQUg9dH1oYW5kbGVFdmVudCh0KXt2YXIgaSxzO1wiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuXyRBSD90aGlzLl8kQUguY2FsbChudWxsIT09KHM9bnVsbD09PShpPXRoaXMub3B0aW9ucyl8fHZvaWQgMD09PWk/dm9pZCAwOmkuaG9zdCkmJnZvaWQgMCE9PXM/czp0aGlzLmVsZW1lbnQsdCk6dGhpcy5fJEFILmhhbmRsZUV2ZW50KHQpfX1jbGFzcyBMe2NvbnN0cnVjdG9yKHQsaSxzKXt0aGlzLmVsZW1lbnQ9dCx0aGlzLnR5cGU9Nix0aGlzLl8kQU49dm9pZCAwLHRoaXMuXyRBTT1pLHRoaXMub3B0aW9ucz1zfWdldCBfJEFVKCl7cmV0dXJuIHRoaXMuXyRBTS5fJEFVfV8kQUkodCl7UCh0aGlzLHQpfX1jb25zdCBSPXtMOlwiJGxpdCRcIixQOmUsVjpvLEk6MSxOOkMsUjpWLGo6dSxEOlAsSDpOLEY6UyxPOkgsVzpJLEI6TSxaOkx9LHo9d2luZG93LmxpdEh0bWxQb2x5ZmlsbFN1cHBvcnQ7bnVsbD09enx8eihFLE4pLChudWxsIT09KHQ9Z2xvYmFsVGhpcy5saXRIdG1sVmVyc2lvbnMpJiZ2b2lkIDAhPT10P3Q6Z2xvYmFsVGhpcy5saXRIdG1sVmVyc2lvbnM9W10pLnB1c2goXCIyLjIuNVwiKTtleHBvcnR7UiBhcyBfJExILCQgYXMgaHRtbCxiIGFzIG5vQ2hhbmdlLHcgYXMgbm90aGluZyx4IGFzIHJlbmRlcix5IGFzIHN2Z307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXQtaHRtbC5qcy5tYXBcbiIsImltcG9ydHtSZWFjdGl2ZUVsZW1lbnQgYXMgdH1mcm9tXCJAbGl0L3JlYWN0aXZlLWVsZW1lbnRcIjtleHBvcnQqZnJvbVwiQGxpdC9yZWFjdGl2ZS1lbGVtZW50XCI7aW1wb3J0e3JlbmRlciBhcyBlLG5vQ2hhbmdlIGFzIGl9ZnJvbVwibGl0LWh0bWxcIjtleHBvcnQqZnJvbVwibGl0LWh0bWxcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL3ZhciBsLG87Y29uc3Qgcj10O2NsYXNzIHMgZXh0ZW5kcyB0e2NvbnN0cnVjdG9yKCl7c3VwZXIoLi4uYXJndW1lbnRzKSx0aGlzLnJlbmRlck9wdGlvbnM9e2hvc3Q6dGhpc30sdGhpcy5fJER0PXZvaWQgMH1jcmVhdGVSZW5kZXJSb290KCl7dmFyIHQsZTtjb25zdCBpPXN1cGVyLmNyZWF0ZVJlbmRlclJvb3QoKTtyZXR1cm4gbnVsbCE9PSh0PShlPXRoaXMucmVuZGVyT3B0aW9ucykucmVuZGVyQmVmb3JlKSYmdm9pZCAwIT09dHx8KGUucmVuZGVyQmVmb3JlPWkuZmlyc3RDaGlsZCksaX11cGRhdGUodCl7Y29uc3QgaT10aGlzLnJlbmRlcigpO3RoaXMuaGFzVXBkYXRlZHx8KHRoaXMucmVuZGVyT3B0aW9ucy5pc0Nvbm5lY3RlZD10aGlzLmlzQ29ubmVjdGVkKSxzdXBlci51cGRhdGUodCksdGhpcy5fJER0PWUoaSx0aGlzLnJlbmRlclJvb3QsdGhpcy5yZW5kZXJPcHRpb25zKX1jb25uZWN0ZWRDYWxsYmFjaygpe3ZhciB0O3N1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCksbnVsbD09PSh0PXRoaXMuXyREdCl8fHZvaWQgMD09PXR8fHQuc2V0Q29ubmVjdGVkKCEwKX1kaXNjb25uZWN0ZWRDYWxsYmFjaygpe3ZhciB0O3N1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCksbnVsbD09PSh0PXRoaXMuXyREdCl8fHZvaWQgMD09PXR8fHQuc2V0Q29ubmVjdGVkKCExKX1yZW5kZXIoKXtyZXR1cm4gaX19cy5maW5hbGl6ZWQ9ITAscy5fJGxpdEVsZW1lbnQkPSEwLG51bGw9PT0obD1nbG9iYWxUaGlzLmxpdEVsZW1lbnRIeWRyYXRlU3VwcG9ydCl8fHZvaWQgMD09PWx8fGwuY2FsbChnbG9iYWxUaGlzLHtMaXRFbGVtZW50OnN9KTtjb25zdCBuPWdsb2JhbFRoaXMubGl0RWxlbWVudFBvbHlmaWxsU3VwcG9ydDtudWxsPT1ufHxuKHtMaXRFbGVtZW50OnN9KTtjb25zdCBoPXtfJEFLOih0LGUsaSk9Pnt0Ll8kQUsoZSxpKX0sXyRBTDp0PT50Ll8kQUx9OyhudWxsIT09KG89Z2xvYmFsVGhpcy5saXRFbGVtZW50VmVyc2lvbnMpJiZ2b2lkIDAhPT1vP286Z2xvYmFsVGhpcy5saXRFbGVtZW50VmVyc2lvbnM9W10pLnB1c2goXCIzLjIuMFwiKTtleHBvcnR7cyBhcyBMaXRFbGVtZW50LHIgYXMgVXBkYXRpbmdFbGVtZW50LGggYXMgXyRMRX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXQtZWxlbWVudC5qcy5tYXBcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3Qgbj1uPT5lPT5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlPygobixlKT0+KHdpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUobixlKSxlKSkobixlKTooKG4sZSk9Pntjb25zdHtraW5kOnQsZWxlbWVudHM6aX09ZTtyZXR1cm57a2luZDp0LGVsZW1lbnRzOmksZmluaXNoZXIoZSl7d2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZShuLGUpfX19KShuLGUpO2V4cG9ydHtuIGFzIGN1c3RvbUVsZW1lbnR9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3VzdG9tLWVsZW1lbnQuanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmNvbnN0IGk9KGksZSk9PlwibWV0aG9kXCI9PT1lLmtpbmQmJmUuZGVzY3JpcHRvciYmIShcInZhbHVlXCJpbiBlLmRlc2NyaXB0b3IpP3suLi5lLGZpbmlzaGVyKG4pe24uY3JlYXRlUHJvcGVydHkoZS5rZXksaSl9fTp7a2luZDpcImZpZWxkXCIsa2V5OlN5bWJvbCgpLHBsYWNlbWVudDpcIm93blwiLGRlc2NyaXB0b3I6e30sb3JpZ2luYWxLZXk6ZS5rZXksaW5pdGlhbGl6ZXIoKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmluaXRpYWxpemVyJiYodGhpc1tlLmtleV09ZS5pbml0aWFsaXplci5jYWxsKHRoaXMpKX0sZmluaXNoZXIobil7bi5jcmVhdGVQcm9wZXJ0eShlLmtleSxpKX19O2Z1bmN0aW9uIGUoZSl7cmV0dXJuKG4sdCk9PnZvaWQgMCE9PXQ/KChpLGUsbik9PntlLmNvbnN0cnVjdG9yLmNyZWF0ZVByb3BlcnR5KG4saSl9KShlLG4sdCk6aShlLG4pfWV4cG9ydHtlIGFzIHByb3BlcnR5fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3BlcnR5LmpzLm1hcFxuIiwiaW1wb3J0e2RlY29yYXRlUHJvcGVydHkgYXMgb31mcm9tXCIuL2Jhc2UuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL3ZhciBuO2NvbnN0IGU9bnVsbCE9KG51bGw9PT0obj13aW5kb3cuSFRNTFNsb3RFbGVtZW50KXx8dm9pZCAwPT09bj92b2lkIDA6bi5wcm90b3R5cGUuYXNzaWduZWRFbGVtZW50cyk/KG8sbik9Pm8uYXNzaWduZWRFbGVtZW50cyhuKToobyxuKT0+by5hc3NpZ25lZE5vZGVzKG4pLmZpbHRlcigobz0+by5ub2RlVHlwZT09PU5vZGUuRUxFTUVOVF9OT0RFKSk7ZnVuY3Rpb24gbChuKXtjb25zdHtzbG90Omwsc2VsZWN0b3I6dH09bnVsbCE9bj9uOnt9O3JldHVybiBvKHtkZXNjcmlwdG9yOm89Pih7Z2V0KCl7dmFyIG87Y29uc3Qgcj1cInNsb3RcIisobD9gW25hbWU9JHtsfV1gOlwiOm5vdChbbmFtZV0pXCIpLGk9bnVsbD09PShvPXRoaXMucmVuZGVyUm9vdCl8fHZvaWQgMD09PW8/dm9pZCAwOm8ucXVlcnlTZWxlY3RvcihyKSxzPW51bGwhPWk/ZShpLG4pOltdO3JldHVybiB0P3MuZmlsdGVyKChvPT5vLm1hdGNoZXModCkpKTpzfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pfSl9ZXhwb3J0e2wgYXMgcXVlcnlBc3NpZ25lZEVsZW1lbnRzfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXF1ZXJ5LWFzc2lnbmVkLWVsZW1lbnRzLmpzLm1hcFxuIiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjk3YmQzNzNhMzI0NGNmOGNlOGIxN2Y5ZmUyMDBhYjQ3LnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJkNjI1NGU5YmRhYWIxNTlkYzljY2IwZWYzYzhlY2NiYy5wbmdcIjsiLCJpbXBvcnQgeyBMaXRFbGVtZW50LCBjc3MsIHVuc2FmZUNTUywgaHRtbCB9IGZyb20gXCJsaXRcIjtcclxuaW1wb3J0IHsgY3VzdG9tRWxlbWVudCwgcHJvcGVydHkgfSBmcm9tIFwibGl0L2RlY29yYXRvcnMuanNcIjtcclxuXHJcbmltcG9ydCBpb3NCdXR0b24gZnJvbSBcIi4vYXBwc3RvcmUucG5nXCI7XHJcbmltcG9ydCBhbmRyb2lkQnV0dG9uIGZyb20gXCIuL3BsYXlzdG9yZS5wbmdcIjtcclxuXHJcbkBjdXN0b21FbGVtZW50KFwidWktYXBwLWJ1dHRvblwiKVxyXG5leHBvcnQgY2xhc3MgQXBwQnV0dG9uIGV4dGVuZHMgTGl0RWxlbWVudCB7XHJcbiAgc3RhdGljIHN0eWxlcyA9IGNzc2BcclxuICAgIC51aS1hcHAtYnV0dG9uIHtcclxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgfVxyXG5cclxuICAgIC51aS1hcHAtYnV0dG9uLS1pb3Mge1xyXG4gICAgICB3aWR0aDogMTU4cHg7XHJcbiAgICAgIGhlaWdodDogNTRweDtcclxuICAgICAgYmFja2dyb3VuZDogdXJsKCR7dW5zYWZlQ1NTKGlvc0J1dHRvbil9KTtcclxuICAgIH1cclxuXHJcbiAgICAudWktYXBwLWJ1dHRvbi0tYW5kcm9pZCB7XHJcbiAgICAgIHdpZHRoOiAxNzVweDtcclxuICAgICAgaGVpZ2h0OiA1NHB4O1xyXG4gICAgICBiYWNrZ3JvdW5kOiB1cmwoJHt1bnNhZmVDU1MoYW5kcm9pZEJ1dHRvbil9KTtcclxuICAgIH1cclxuICBgO1xyXG5cclxuICBAcHJvcGVydHkoKVxyXG4gIG9zOiBzdHJpbmcgPSBcImlvc1wiO1xyXG5cclxuICBAcHJvcGVydHkoKVxyXG4gIGxpbms6IHN0cmluZztcclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgcmV0dXJuIGh0bWxgPGEgY2xhc3M9XCJ1aS1hcHAtYnV0dG9uIHVpLWFwcC1idXR0b24tLSR7dGhpcy5vc31cIj48L2E+YDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHtMaXRFbGVtZW50LCBjc3MsIGh0bWx9IGZyb20gJ2xpdCc7XHJcbmltcG9ydCB7Y3VzdG9tRWxlbWVudCwgcHJvcGVydHl9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcclxuXHJcbkBjdXN0b21FbGVtZW50KCd1aS1idXR0b24nKVxyXG5leHBvcnQgY2xhc3MgQnV0dG9uIGV4dGVuZHMgTGl0RWxlbWVudCB7XHJcbiAgc3RhdGljIHN0eWxlcyA9IGNzc2BcclxuICAgIFxyXG4gIGA7XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiBodG1sYDxkaXYgY2xhc3M9XCJ1aS1idXR0b25cIj48c2xvdD48L3Nsb3Q+PC9kaXY+YDtcclxuICB9XHJcbn0iLCJpbXBvcnQgeyBMaXRFbGVtZW50LCBjc3MsIGh0bWwgfSBmcm9tIFwibGl0XCI7XHJcbmltcG9ydCB7IGN1c3RvbUVsZW1lbnQsIHByb3BlcnR5IH0gZnJvbSBcImxpdC9kZWNvcmF0b3JzLmpzXCI7XHJcblxyXG5AY3VzdG9tRWxlbWVudChcInVpLWNhcmRcIilcclxuZXhwb3J0IGNsYXNzIENhcmQgZXh0ZW5kcyBMaXRFbGVtZW50IHtcclxuICBzdGF0aWMgc3R5bGVzID0gY3NzYFxyXG4gICAgOmhvc3Qge1xyXG4gICAgICBib3gtc2hhZG93OiAwIDVweCAxNXB4IHJnYigwIDAgMCAvIDglKTtcclxuICAgICAgcGFkZGluZzogMzBweCAzMHB4O1xyXG4gICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIH1cclxuXHJcbiAgICA6aG9zdC1jb250ZXh0KFttYXRjaF0pIHtcclxuICAgICAgZmxleDogYXV0bztcclxuICAgIH1cclxuICBgO1xyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICByZXR1cm4gaHRtbGA8c2xvdD48L3Nsb3Q+YDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHtMaXRFbGVtZW50LCBjc3MsIGh0bWx9IGZyb20gJ2xpdCc7XHJcbmltcG9ydCB7Y3VzdG9tRWxlbWVudCwgcHJvcGVydHl9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcclxuXHJcbkBjdXN0b21FbGVtZW50KCd1aS1jb250YWluZXInKVxyXG5leHBvcnQgY2xhc3MgQ29udGFpbmVyIGV4dGVuZHMgTGl0RWxlbWVudCB7XHJcbiAgc3RhdGljIHN0eWxlcyA9IGNzc2BcclxuICAgIC51aS1jb250YWluZXIge1xyXG4gICAgICAgIG1heC13aWR0aDogMTIwMHB4O1xyXG4gICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xyXG4gICAgICAgIG1hcmdpbi1yaWdodDogYXV0bztcclxuICAgICAgICBwYWRkaW5nLWxlZnQ6IDE1cHg7XHJcbiAgICAgICAgcGFkZGluZy1yaWdodDogMTVweDtcclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1pbi13aWR0aDogNjQwcHgpIHtcclxuICAgICAgICAudWktY29udGFpbmVyIHtcclxuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAzMHB4O1xyXG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAzMHB4O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1pbi13aWR0aDogOTYwcHgpIHtcclxuICAgICAgICAudWktY29udGFpbmVyIHtcclxuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA0MHB4O1xyXG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiA0MHB4O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICBgO1xyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICByZXR1cm4gaHRtbGA8ZGl2IGNsYXNzPVwidWktY29udGFpbmVyXCI+PHNsb3Q+PC9zbG90PjwvZGl2PmA7XHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgY3NzLCBodG1sLCBMaXRFbGVtZW50IH0gZnJvbSBcImxpdFwiO1xyXG5pbXBvcnQgeyBjdXN0b21FbGVtZW50LCBwcm9wZXJ0eSB9IGZyb20gXCJsaXQvZGVjb3JhdG9ycy5qc1wiO1xyXG5cclxuQGN1c3RvbUVsZW1lbnQoXCJ1aS1ncmlkXCIpXHJcbmV4cG9ydCBjbGFzcyBHcmlkIGV4dGVuZHMgTGl0RWxlbWVudCB7XHJcbiAgc3RhdGljIHN0eWxlcyA9IGNzc2BcclxuICAgIDpob3N0KFtjb250YWluZXJdKSB7XHJcbiAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgICAgIGZsZXgtd3JhcDogd3JhcDtcclxuICAgICAgbWFyZ2luOiAwO1xyXG4gICAgICBtYXJnaW4tbGVmdDogLTMwcHg7XHJcbiAgICAgIHBhZGRpbmc6IDA7XHJcbiAgICAgIGxpc3Qtc3R5bGU6IG5vbmU7XHJcbiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbiAgICB9XHJcblxyXG4gICAgOmhvc3QoW2NvbnRhaW5lcl1bbWF0Y2hdKSA6OnNsb3R0ZWQodWktZ3JpZFtpdGVtXSkge1xyXG4gICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgfVxyXG5cclxuICAgIDpob3N0KFtpdGVtXSkge1xyXG4gICAgICBmbGV4OiAxIDEgMTAwJTtcclxuICAgICAgcGFkZGluZy1sZWZ0OiAzMHB4O1xyXG4gICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG4gICAgfVxyXG5cclxuICAgIEBtZWRpYSAobWluLXdpZHRoOiA0ODBweCkge1xyXG4gICAgICA6aG9zdChbaXRlbV1bc209XCIxXCJdKSB7XHJcbiAgICAgICAgZmxleC1iYXNpczogY2FsYygxMDAlIC8gMTIgKiAxKTtcclxuICAgICAgfVxyXG4gICAgICA6aG9zdChbaXRlbV1bc209XCIyXCJdKSB7XHJcbiAgICAgICAgZmxleC1iYXNpczogY2FsYygxMDAlIC8gMTIgKiAyKTtcclxuICAgICAgfVxyXG4gICAgICA6aG9zdChbaXRlbV1bc209XCIzXCJdKSB7XHJcbiAgICAgICAgZmxleC1iYXNpczogY2FsYygxMDAlIC8gMTIgKiAzKTtcclxuICAgICAgfVxyXG4gICAgICA6aG9zdChbaXRlbV1bc209XCI0XCJdKSB7XHJcbiAgICAgICAgZmxleC1iYXNpczogY2FsYygxMDAlIC8gMTIgKiA0KTtcclxuICAgICAgfVxyXG4gICAgICA6aG9zdChbaXRlbV1bc209XCI1XCJdKSB7XHJcbiAgICAgICAgZmxleC1iYXNpczogY2FsYygxMDAlIC8gMTIgKiA1KTtcclxuICAgICAgfVxyXG4gICAgICA6aG9zdChbaXRlbV1bc209XCI2XCJdKSB7XHJcbiAgICAgICAgZmxleC1iYXNpczogY2FsYyg1MCUpO1xyXG4gICAgICB9XHJcbiAgICAgIDpob3N0KFtpdGVtXVtzbT1cIjdcIl0pIHtcclxuICAgICAgICBmbGV4LWJhc2lzOiBjYWxjKDEwMCUgLyAxMiAqIDcpO1xyXG4gICAgICB9XHJcbiAgICAgIDpob3N0KFtpdGVtXVtzbT1cIjhcIl0pIHtcclxuICAgICAgICBmbGV4LWJhc2lzOiBjYWxjKDEwMCUgLyAxMiAqIDgpO1xyXG4gICAgICB9XHJcbiAgICAgIDpob3N0KFtpdGVtXVtzbT1cIjlcIl0pIHtcclxuICAgICAgICBmbGV4LWJhc2lzOiBjYWxjKDEwMCUgLyAxMiAqIDkpO1xyXG4gICAgICB9XHJcbiAgICAgIDpob3N0KFtpdGVtXVtzbT1cIjEwXCJdKSB7XHJcbiAgICAgICAgZmxleC1iYXNpczogY2FsYygxMDAlIC8gMTIgKiAxMCk7XHJcbiAgICAgIH1cclxuICAgICAgOmhvc3QoW2l0ZW1dW3NtPVwiMTFcIl0pIHtcclxuICAgICAgICBmbGV4LWJhc2lzOiBjYWxjKDEwMCUgLyAxMiAqIDExKTtcclxuICAgICAgfVxyXG4gICAgICA6aG9zdChbaXRlbV1bc209XCIxMlwiXSkge1xyXG4gICAgICAgIGZsZXgtYmFzaXM6IDEwMCU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcclxuICAgICAgOmhvc3QoW2l0ZW1dW21kPVwiMVwiXSkge1xyXG4gICAgICAgIGZsZXgtYmFzaXM6IGNhbGMoMTAwJSAvIDEyICogMSk7XHJcbiAgICAgIH1cclxuICAgICAgOmhvc3QoW2l0ZW1dW21kPVwiMlwiXSkge1xyXG4gICAgICAgIGZsZXgtYmFzaXM6IGNhbGMoMTAwJSAvIDEyICogMik7XHJcbiAgICAgIH1cclxuICAgICAgOmhvc3QoW2l0ZW1dW21kPVwiM1wiXSkge1xyXG4gICAgICAgIGZsZXgtYmFzaXM6IGNhbGMoMTAwJSAvIDEyICogMyk7XHJcbiAgICAgIH1cclxuICAgICAgOmhvc3QoW2l0ZW1dW21kPVwiNFwiXSkge1xyXG4gICAgICAgIGZsZXgtYmFzaXM6IGNhbGMoMTAwJSAvIDEyICogNCk7XHJcbiAgICAgIH1cclxuICAgICAgOmhvc3QoW2l0ZW1dW21kPVwiNVwiXSkge1xyXG4gICAgICAgIGZsZXgtYmFzaXM6IGNhbGMoMTAwJSAvIDEyICogNSk7XHJcbiAgICAgIH1cclxuICAgICAgOmhvc3QoW2l0ZW1dW21kPVwiNlwiXSkge1xyXG4gICAgICAgIGZsZXgtYmFzaXM6IGNhbGMoNTAlKTtcclxuICAgICAgfVxyXG4gICAgICA6aG9zdChbaXRlbV1bbWQ9XCI3XCJdKSB7XHJcbiAgICAgICAgZmxleC1iYXNpczogY2FsYygxMDAlIC8gMTIgKiA3KTtcclxuICAgICAgfVxyXG4gICAgICA6aG9zdChbaXRlbV1bbWQ9XCI4XCJdKSB7XHJcbiAgICAgICAgZmxleC1iYXNpczogY2FsYygxMDAlIC8gMTIgKiA4KTtcclxuICAgICAgfVxyXG4gICAgICA6aG9zdChbaXRlbV1bbWQ9XCI5XCJdKSB7XHJcbiAgICAgICAgZmxleC1iYXNpczogY2FsYygxMDAlIC8gMTIgKiA5KTtcclxuICAgICAgfVxyXG4gICAgICA6aG9zdChbaXRlbV1bbWQ9XCIxMFwiXSkge1xyXG4gICAgICAgIGZsZXgtYmFzaXM6IGNhbGMoMTAwJSAvIDEyICogMTApO1xyXG4gICAgICB9XHJcbiAgICAgIDpob3N0KFtpdGVtXVttZD1cIjExXCJdKSB7XHJcbiAgICAgICAgZmxleC1iYXNpczogY2FsYygxMDAlIC8gMTIgKiAxMSk7XHJcbiAgICAgIH1cclxuICAgICAgOmhvc3QoW2l0ZW1dW21kPVwiMTJcIl0pIHtcclxuICAgICAgICBmbGV4LWJhc2lzOiAxMDAlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQG1lZGlhIChtaW4td2lkdGg6IDk2MHB4KSB7XHJcbiAgICAgIDpob3N0KFtpdGVtXVtsZz1cIjFcIl0pIHtcclxuICAgICAgICBmbGV4LWJhc2lzOiBjYWxjKDEwMCUgLyAxMiAqIDEpO1xyXG4gICAgICB9XHJcbiAgICAgIDpob3N0KFtpdGVtXVtsZz1cIjJcIl0pIHtcclxuICAgICAgICBmbGV4LWJhc2lzOiBjYWxjKDEwMCUgLyAxMiAqIDIpO1xyXG4gICAgICB9XHJcbiAgICAgIDpob3N0KFtpdGVtXVtsZz1cIjNcIl0pIHtcclxuICAgICAgICBmbGV4LWJhc2lzOiBjYWxjKDEwMCUgLyAxMiAqIDMpO1xyXG4gICAgICB9XHJcbiAgICAgIDpob3N0KFtpdGVtXVtsZz1cIjRcIl0pIHtcclxuICAgICAgICBmbGV4LWJhc2lzOiBjYWxjKDEwMCUgLyAxMiAqIDQpO1xyXG4gICAgICB9XHJcbiAgICAgIDpob3N0KFtpdGVtXVtsZz1cIjVcIl0pIHtcclxuICAgICAgICBmbGV4LWJhc2lzOiBjYWxjKDEwMCUgLyAxMiAqIDUpO1xyXG4gICAgICB9XHJcbiAgICAgIDpob3N0KFtpdGVtXVtsZz1cIjZcIl0pIHtcclxuICAgICAgICBmbGV4LWJhc2lzOiBjYWxjKDUwJSk7XHJcbiAgICAgIH1cclxuICAgICAgOmhvc3QoW2l0ZW1dW2xnPVwiN1wiXSkge1xyXG4gICAgICAgIGZsZXgtYmFzaXM6IGNhbGMoMTAwJSAvIDEyICogNyk7XHJcbiAgICAgIH1cclxuICAgICAgOmhvc3QoW2l0ZW1dW2xnPVwiOFwiXSkge1xyXG4gICAgICAgIGZsZXgtYmFzaXM6IGNhbGMoMTAwJSAvIDEyICogOCk7XHJcbiAgICAgIH1cclxuICAgICAgOmhvc3QoW2l0ZW1dW2xnPVwiOVwiXSkge1xyXG4gICAgICAgIGZsZXgtYmFzaXM6IGNhbGMoMTAwJSAvIDEyICogOSk7XHJcbiAgICAgIH1cclxuICAgICAgOmhvc3QoW2l0ZW1dW2xnPVwiMTBcIl0pIHtcclxuICAgICAgICBmbGV4LWJhc2lzOiBjYWxjKDEwMCUgLyAxMiAqIDEwKTtcclxuICAgICAgfVxyXG4gICAgICA6aG9zdChbaXRlbV1bbGc9XCIxMVwiXSkge1xyXG4gICAgICAgIGZsZXgtYmFzaXM6IGNhbGMoMTAwJSAvIDEyICogMTEpO1xyXG4gICAgICB9XHJcbiAgICAgIDpob3N0KFtpdGVtXVtsZz1cIjEyXCJdKSB7XHJcbiAgICAgICAgZmxleC1iYXNpczogMTAwJTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEBtZWRpYSAobWluLXdpZHRoOiAxMjAwcHgpIHtcclxuICAgICAgOmhvc3QoW2l0ZW1dW3hsPVwiMVwiXSkge1xyXG4gICAgICAgIGZsZXgtYmFzaXM6IGNhbGMoMTAwJSAvIDEyICogMSk7XHJcbiAgICAgIH1cclxuICAgICAgOmhvc3QoW2l0ZW1dW3hsPVwiMlwiXSkge1xyXG4gICAgICAgIGZsZXgtYmFzaXM6IGNhbGMoMTAwJSAvIDEyICogMik7XHJcbiAgICAgIH1cclxuICAgICAgOmhvc3QoW2l0ZW1dW3hsPVwiM1wiXSkge1xyXG4gICAgICAgIGZsZXgtYmFzaXM6IGNhbGMoMTAwJSAvIDEyICogMyk7XHJcbiAgICAgIH1cclxuICAgICAgOmhvc3QoW2l0ZW1dW3hsPVwiNFwiXSkge1xyXG4gICAgICAgIGZsZXgtYmFzaXM6IGNhbGMoMTAwJSAvIDEyICogNCk7XHJcbiAgICAgIH1cclxuICAgICAgOmhvc3QoW2l0ZW1dW3hsPVwiNVwiXSkge1xyXG4gICAgICAgIGZsZXgtYmFzaXM6IGNhbGMoMTAwJSAvIDEyICogNSk7XHJcbiAgICAgIH1cclxuICAgICAgOmhvc3QoW2l0ZW1dW3hsPVwiNlwiXSkge1xyXG4gICAgICAgIGZsZXgtYmFzaXM6IGNhbGMoNTAlKTtcclxuICAgICAgfVxyXG4gICAgICA6aG9zdChbaXRlbV1beGw9XCI3XCJdKSB7XHJcbiAgICAgICAgZmxleC1iYXNpczogY2FsYygxMDAlIC8gMTIgKiA3KTtcclxuICAgICAgfVxyXG4gICAgICA6aG9zdChbaXRlbV1beGw9XCI4XCJdKSB7XHJcbiAgICAgICAgZmxleC1iYXNpczogY2FsYygxMDAlIC8gMTIgKiA4KTtcclxuICAgICAgfVxyXG4gICAgICA6aG9zdChbaXRlbV1beGw9XCI5XCJdKSB7XHJcbiAgICAgICAgZmxleC1iYXNpczogY2FsYygxMDAlIC8gMTIgKiA5KTtcclxuICAgICAgfVxyXG4gICAgICA6aG9zdChbaXRlbV1beGw9XCIxMFwiXSkge1xyXG4gICAgICAgIGZsZXgtYmFzaXM6IGNhbGMoMTAwJSAvIDEyICogMTApO1xyXG4gICAgICB9XHJcbiAgICAgIDpob3N0KFtpdGVtXVt4bD1cIjExXCJdKSB7XHJcbiAgICAgICAgZmxleC1iYXNpczogY2FsYygxMDAlIC8gMTIgKiAxMSk7XHJcbiAgICAgIH1cclxuICAgICAgOmhvc3QoW2l0ZW1dW3hsPVwiMTJcIl0pIHtcclxuICAgICAgICBmbGV4LWJhc2lzOiAxMDAlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgcmV0dXJuIGh0bWxgPHNsb3Q+PC9zbG90PmA7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IExpdEVsZW1lbnQsIGNzcywgaHRtbCB9IGZyb20gXCJsaXRcIjtcclxuaW1wb3J0IHsgY3VzdG9tRWxlbWVudCwgcHJvcGVydHkgfSBmcm9tIFwibGl0L2RlY29yYXRvcnMuanNcIjtcclxuXHJcbkBjdXN0b21FbGVtZW50KFwidWktaGVhZGluZ1wiKVxyXG5leHBvcnQgY2xhc3MgSGVhZGluZyBleHRlbmRzIExpdEVsZW1lbnQge1xyXG4gIHN0YXRpYyBzdHlsZXMgPSBjc3NgXHJcbiAgICAuaGVhZGluZyB7XHJcbiAgICAgIGxpbmUtaGVpZ2h0OiAxLjI7XHJcbiAgICB9XHJcblxyXG4gICAgLmhlYWRpbmctLWgxIHtcclxuICAgICAgY29sb3I6IHZhcigtLXVpLWhlYWRpbmctZm9udC1jb2xvciwgdmFyKC0tdWktYmFzZS1mb250LWNvbG9yLCBpbmhlcml0KSk7XHJcbiAgICAgIGZvbnQtc2l6ZTogMzZweDtcclxuICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICAgICAgZm9udC1mYW1pbHk6IHZhcihcclxuICAgICAgICAtLXVpLWhlYWRpbmctZm9udC1mYW1pbHksXHJcbiAgICAgICAgdmFyKC0tdWktYmFzZS1mb250LWZhbWlseSwgaW5oZXJpdClcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1pbi13aWR0aDogOTYwcHgpIHtcclxuICAgICAgLmhlYWRpbmctLWgxIHtcclxuICAgICAgICBmb250LXNpemU6IDQycHg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICA6aG9zdChbbGlnaHRdKSAuaGVhZGluZyB7XHJcbiAgICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgIH1cclxuXHJcbiAgICAuaGVhZGluZy0taDIge1xyXG4gICAgICBjb2xvcjogdmFyKC0tdWktaGVhZGluZy1mb250LWNvbG9yLCB2YXIoLS11aS1iYXNlLWZvbnQtY29sb3IsIGluaGVyaXQpKTtcclxuICAgICAgZm9udC1zaXplOiAyNHB4O1xyXG4gICAgICBmb250LXdlaWdodDogMzAwO1xyXG4gICAgfVxyXG5cclxuICAgIC5oZWFkaW5nLS1oMyB7XHJcbiAgICAgIGNvbG9yOiB2YXIoLS11aS1oZWFkaW5nLWZvbnQtY29sb3IsIHZhcigtLXVpLWJhc2UtZm9udC1jb2xvciwgaW5oZXJpdCkpO1xyXG4gICAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICAgIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgICB9XHJcblxyXG4gICAgLmhlYWRpbmctLWg0IHtcclxuICAgICAgY29sb3I6IHZhcigtLXVpLWhlYWRpbmctZm9udC1jb2xvciwgdmFyKC0tdWktYmFzZS1mb250LWNvbG9yLCBpbmhlcml0KSk7XHJcbiAgICAgIGZvbnQtc2l6ZTogMTJweDtcclxuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgQHByb3BlcnR5KClcclxuICB2YXJpYW50OiBzdHJpbmcgPSBcImgxXCI7XHJcblxyXG4gIEBwcm9wZXJ0eSgpXHJcbiAgY29tcG9uZW50OiBzdHJpbmcgPSBcImRpdlwiO1xyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBsZXQgb3V0cHV0ID0gaHRtbGA8ZGl2IGNsYXNzPVwiaGVhZGluZyBoZWFkaW5nLS0ke3RoaXMudmFyaWFudH1cIj5cclxuICAgICAgPHNsb3Q+PC9zbG90PlxyXG4gICAgPC9kaXY+YDtcclxuICAgIGlmICh0aGlzLmNvbXBvbmVudCA9PT0gXCJoMVwiKSB7XHJcbiAgICAgIG91dHB1dCA9IGh0bWxgPGgxIGNsYXNzPVwiaGVhZGluZyBoZWFkaW5nLS0ke3RoaXMudmFyaWFudH1cIj5cclxuICAgICAgICA8c2xvdD48L3Nsb3Q+XHJcbiAgICAgIDwvaDE+YDtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5jb21wb25lbnQgPT09IFwiaDJcIikge1xyXG4gICAgICBvdXRwdXQgPSBodG1sYDxoMiBjbGFzcz1cImhlYWRpbmcgaGVhZGluZy0tJHt0aGlzLnZhcmlhbnR9XCI+XHJcbiAgICAgICAgPHNsb3Q+PC9zbG90PlxyXG4gICAgICA8L2gyPmA7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuY29tcG9uZW50ID09PSBcImgzXCIpIHtcclxuICAgICAgb3V0cHV0ID0gaHRtbGA8aDMgY2xhc3M9XCJoZWFkaW5nIGhlYWRpbmctLSR7dGhpcy52YXJpYW50fVwiPlxyXG4gICAgICAgIDxzbG90Pjwvc2xvdD5cclxuICAgICAgPC9oMz5gO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmNvbXBvbmVudCA9PT0gXCJoNFwiKSB7XHJcbiAgICAgIG91dHB1dCA9IGh0bWxgPGg0IGNsYXNzPVwiaGVhZGluZyBoZWFkaW5nLS0ke3RoaXMudmFyaWFudH1cIj5cclxuICAgICAgICA8c2xvdD48L3Nsb3Q+XHJcbiAgICAgIDwvaDQ+YDtcclxuICAgIH1cclxuICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IExpdEVsZW1lbnQsIGNzcywgaHRtbCB9IGZyb20gXCJsaXRcIjtcclxuaW1wb3J0IHsgY3VzdG9tRWxlbWVudCwgcHJvcGVydHkgfSBmcm9tIFwibGl0L2RlY29yYXRvcnMuanNcIjtcclxuXHJcbkBjdXN0b21FbGVtZW50KFwidWktc2VjdGlvblwiKVxyXG5leHBvcnQgY2xhc3MgU2VjdGlvbiBleHRlbmRzIExpdEVsZW1lbnQge1xyXG4gIHN0YXRpYyBzdHlsZXMgPSBjc3NgXHJcbiAgICAudWktc2VjdGlvbiB7XHJcbiAgICAgIHBhZGRpbmctdG9wOiA0MHB4O1xyXG4gICAgICBwYWRkaW5nLWJvdHRvbTogNDBweDtcclxuICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICB9XHJcblxyXG4gICAgQG1lZGlhIChtaW4td2lkdGg6IDk2MHB4KSB7XHJcbiAgICAgIC51aS1zZWN0aW9uIHtcclxuICAgICAgICBwYWRkaW5nLXRvcDogNzBweDtcclxuICAgICAgICBwYWRkaW5nLWJvdHRvbTogNzBweDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC51aS1zZWN0aW9uLS1uby1wYWRkaW5nIHtcclxuICAgICAgcGFkZGluZy10b3A6IDA7XHJcbiAgICAgIHBhZGRpbmctYm90dG9tOiAwO1xyXG4gICAgfVxyXG5cclxuICAgIC51aS1zZWN0aW9uLS1wcmltYXJ5IHtcclxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjhmODtcclxuICAgIH1cclxuICBgO1xyXG5cclxuICBAcHJvcGVydHkoe3R5cGU6IEJvb2xlYW59KVxyXG4gIG5vUGFkZGluZzogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICBAcHJvcGVydHkoe3R5cGU6IEJvb2xlYW59KVxyXG4gIHByaW1hcnk6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc29sZS5sb2codGhpcy5ub1BhZGRpbmcpO1xyXG5cclxuICAgIHJldHVybiBodG1sYDxkaXYgY2xhc3M9XCJ1aS1zZWN0aW9uICR7dGhpcy5ub1BhZGRpbmcgPyAndWktc2VjdGlvbi0tbm8tcGFkZGluZycgOiAnJ30gJHt0aGlzLnByaW1hcnkgPyAndWktc2VjdGlvbi0tcHJpbWFyeScgOiAnJ31cIj5cclxuICAgICAgPHNsb3Q+PC9zbG90PlxyXG4gICAgPC9kaXY+YDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgTGl0RWxlbWVudCwgY3NzLCBodG1sIH0gZnJvbSBcImxpdFwiO1xyXG5pbXBvcnQgeyBjdXN0b21FbGVtZW50LCBwcm9wZXJ0eSB9IGZyb20gXCJsaXQvZGVjb3JhdG9ycy5qc1wiO1xyXG5pbXBvcnQgXCIuLi9zZWN0aW9uL1NlY3Rpb25cIjtcclxuaW1wb3J0IFwiLi4vY29udGFpbmVyL0NvbnRhaW5lclwiO1xyXG5pbXBvcnQgXCIuLi9ncmlkL0dyaWRcIjtcclxuXHJcbkBjdXN0b21FbGVtZW50KFwidWktaGVyb1wiKVxyXG5leHBvcnQgY2xhc3MgSGVybyBleHRlbmRzIExpdEVsZW1lbnQge1xyXG4gIHN0YXRpYyBzdHlsZXMgPSBjc3NgXHJcbiAgICAudWktaGVybyB7XHJcbiAgICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XHJcbiAgICAgIGhlaWdodDogNDUwcHg7XHJcbiAgICB9XHJcblxyXG4gICAgLnVpLWhlcm9fX2NvbnRhaW5lciB7XHJcbiAgICAgIGhlaWdodDogNDUwcHg7XHJcbiAgICB9XHJcblxyXG4gICAgLnVpLWhlcm9fX2ltYWdlIHtcclxuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgfVxyXG5cclxuICAgIDpob3N0KFtsaWdodF0pIHtcclxuICAgICAgY29sb3I6IHdoaXRlO1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIEBwcm9wZXJ0eSgpXHJcbiAgYmFja2dyb3VuZDogc3RyaW5nO1xyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICByZXR1cm4gaHRtbGA8ZGl2XHJcbiAgICAgIGNsYXNzPVwidWktaGVyb1wiXHJcbiAgICAgIHN0eWxlPVwiYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7dGhpcy5iYWNrZ3JvdW5kfSlcIlxyXG4gICAgPlxyXG4gICAgICA8dWktc2VjdGlvbiBub3BhZGRpbmc+XHJcbiAgICAgICAgPHVpLWNvbnRhaW5lcj5cclxuICAgICAgICAgIDx1aS1ncmlkIGNvbnRhaW5lciBjbGFzcz1cInVpLWhlcm9fX2NvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICA8dWktZ3JpZCBpdGVtIG1kPVwiNlwiPlxyXG4gICAgICAgICAgICAgIDxzbG90IG5hbWU9XCJoZWFkaW5nXCI+PC9zbG90PlxyXG4gICAgICAgICAgICAgIDxzbG90IG5hbWU9XCJ0ZXh0XCI+PC9zbG90PlxyXG4gICAgICAgICAgICAgIDxzbG90IG5hbWU9XCJhY3Rpb25zXCI+PC9zbG90PlxyXG4gICAgICAgICAgICA8L3VpLWdyaWQ+XHJcbiAgICAgICAgICAgIDx1aS1ncmlkIGl0ZW0gbWQ9XCI2XCIgY2xhc3M9XCJ1aS1oZXJvX19pbWFnZVwiPlxyXG4gICAgICAgICAgICAgIDxzbG90IG5hbWU9XCJpbWFnZVwiPjwvc2xvdD5cclxuICAgICAgICAgICAgPC91aS1ncmlkPlxyXG4gICAgICAgICAgPC91aS1ncmlkPlxyXG4gICAgICAgIDwvdWktY29udGFpbmVyPlxyXG4gICAgICA8L3VpLXNlY3Rpb24+XHJcbiAgICA8L2Rpdj5gO1xyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwibWVtbyIsImdldFRhcmdldCIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4Iiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlIiwiY3JlYXRlRWxlbWVudCIsImF0dHJpYnV0ZXMiLCJub25jZSIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwia2V5Iiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJCb29sZWFuIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwbHlUb1RhZyIsInJlbW92ZUF0dHJpYnV0ZSIsImZpcnN0Q2hpbGQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwidXBkYXRlIiwic3R5bGVJbmRleCIsImJpbmQiLCJwYXJlbnROb2RlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwibmV3T2JqIiwiYWxsIiwiYXRvYiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJwcm90b3R5cGUiLCJjYWxsIiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJzcGxpY2UiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInByb3AiLCJoYXNPd25Qcm9wZXJ0eSIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJyZXBsYWNlIiwicCIsIm5jIiwiU2hhZG93Um9vdCIsIlNoYWR5Q1NTIiwibmF0aXZlU2hhZG93IiwiRG9jdW1lbnQiLCJDU1NTdHlsZVNoZWV0IiwiU3ltYm9sIiwiTWFwIiwicyIsImNvbnN0cnVjdG9yIiwidCIsIl8kY3NzUmVzdWx0JCIsInNldCIsInJlcGxhY2VTeW5jIiwiciIsInJlZHVjZSIsIlMiLCJjc3NSdWxlcyIsInRydXN0ZWRUeXBlcyIsImVtcHR5U2NyaXB0IiwiaCIsInJlYWN0aXZlRWxlbWVudFBvbHlmaWxsU3VwcG9ydCIsInRvQXR0cmlidXRlIiwiQXJyYXkiLCJmcm9tQXR0cmlidXRlIiwiTnVtYmVyIiwicGFyc2UiLCJsIiwiYXR0cmlidXRlIiwidHlwZSIsIlN0cmluZyIsImNvbnZlcnRlciIsInJlZmxlY3QiLCJoYXNDaGFuZ2VkIiwiSFRNTEVsZW1lbnQiLCJzdXBlciIsIl8kRXQiLCJpc1VwZGF0ZVBlbmRpbmciLCJoYXNVcGRhdGVkIiwiXyRFaSIsInN0YXRpYyIsIm9ic2VydmVkQXR0cmlidXRlcyIsImZpbmFsaXplIiwiZWxlbWVudFByb3BlcnRpZXMiLCJfJEVoIiwiXyRFdSIsInN0YXRlIiwibm9BY2Nlc3NvciIsImdldFByb3BlcnR5RGVzY3JpcHRvciIsInJlcXVlc3RVcGRhdGUiLCJjb25maWd1cmFibGUiLCJmaW5hbGl6ZWQiLCJnZXRQcm90b3R5cGVPZiIsInByb3BlcnRpZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiY3JlYXRlUHJvcGVydHkiLCJlbGVtZW50U3R5bGVzIiwiZmluYWxpemVTdHlsZXMiLCJzdHlsZXMiLCJpc0FycmF5IiwiU2V0IiwiZmxhdCIsInJldmVyc2UiLCJ1bnNoaWZ0IiwidG9Mb3dlckNhc2UiLCJfJEVwIiwiUHJvbWlzZSIsImVuYWJsZVVwZGF0aW5nIiwiXyRBTCIsIl8kRW0iLCJhZGRDb250cm9sbGVyIiwiXyRFZyIsInJlbmRlclJvb3QiLCJpc0Nvbm5lY3RlZCIsImhvc3RDb25uZWN0ZWQiLCJyZW1vdmVDb250cm9sbGVyIiwiaW5kZXhPZiIsImNyZWF0ZVJlbmRlclJvb3QiLCJzaGFkb3dSb290IiwiYXR0YWNoU2hhZG93Iiwic2hhZG93Um9vdE9wdGlvbnMiLCJhZG9wdGVkU3R5bGVTaGVldHMiLCJsaXROb25jZSIsInRleHRDb250ZW50IiwiY29ubmVjdGVkQ2FsbGJhY2siLCJkaXNjb25uZWN0ZWRDYWxsYmFjayIsImhvc3REaXNjb25uZWN0ZWQiLCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2siLCJfJEFLIiwiXyRFUyIsImdldFByb3BlcnR5T3B0aW9ucyIsImhhcyIsIl8kRUMiLCJfJEVfIiwiYXN5bmMiLCJyZWplY3QiLCJzY2hlZHVsZVVwZGF0ZSIsInBlcmZvcm1VcGRhdGUiLCJzaG91bGRVcGRhdGUiLCJ3aWxsVXBkYXRlIiwiaG9zdFVwZGF0ZSIsIl8kRVUiLCJfJEFFIiwiaG9zdFVwZGF0ZWQiLCJmaXJzdFVwZGF0ZWQiLCJ1cGRhdGVkIiwidXBkYXRlQ29tcGxldGUiLCJnZXRVcGRhdGVDb21wbGV0ZSIsIm1vZGUiLCJSZWFjdGl2ZUVsZW1lbnQiLCJyZWFjdGl2ZUVsZW1lbnRWZXJzaW9ucyIsImNyZWF0ZVBvbGljeSIsImNyZWF0ZUhUTUwiLCJNYXRoIiwicmFuZG9tIiwic2xpY2UiLCJjcmVhdGVDb21tZW50IiwiYyIsInYiLCJmIiwiXyIsIm0iLCJfJGxpdFR5cGUkIiwic3RyaW5ncyIsInZhbHVlcyIsIiQiLCJiIiwiZm9yIiwidyIsIlQiLCJXZWFrTWFwIiwiQSIsImNyZWF0ZVRyZWVXYWxrZXIiLCJDIiwidSIsImxhc3RJbmRleCIsImV4ZWMiLCJ0ZXN0IiwiUmVnRXhwIiwieSIsInN0YXJ0c1dpdGgiLCJFIiwicGFydHMiLCJlbCIsImN1cnJlbnROb2RlIiwiYXBwZW5kIiwibmV4dE5vZGUiLCJub2RlVHlwZSIsImhhc0F0dHJpYnV0ZXMiLCJnZXRBdHRyaWJ1dGVOYW1lcyIsImVuZHNXaXRoIiwiZ2V0QXR0cmlidXRlIiwic3BsaXQiLCJuYW1lIiwiY3RvciIsIk0iLCJIIiwiSSIsInRhZ05hbWUiLCJpbm5lckhUTUwiLCJQIiwiXyRDbCIsIl8kQ3UiLCJfJGxpdERpcmVjdGl2ZSQiLCJfJEFPIiwiXyRBVCIsIl8kQVMiLCJWIiwiXyRBTiIsIl8kQUQiLCJfJEFNIiwiXyRBVSIsImNyZWF0aW9uU2NvcGUiLCJpbXBvcnROb2RlIiwiTiIsIm5leHRTaWJsaW5nIiwiTCIsIl8kQUkiLCJfJEFIIiwiXyRBQSIsIl8kQUIiLCJfJENnIiwic3RhcnROb2RlIiwiZW5kTm9kZSIsIl8kQVIiLCJpdGVyYXRvciIsIl8kQUMiLCJfJEFQIiwic2V0Q29ubmVjdGVkIiwiZWxlbWVudCIsImZpbGwiLCJhcmd1bWVudHMiLCJjYXB0dXJlIiwib25jZSIsInBhc3NpdmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZUV2ZW50IiwiaG9zdCIsInoiLCJsaXRIdG1sUG9seWZpbGxTdXBwb3J0IiwibGl0SHRtbFZlcnNpb25zIiwicmVuZGVyT3B0aW9ucyIsIl8kRHQiLCJyZW5kZXJCZWZvcmUiLCJyZW5kZXIiLCJfJGxpdFBhcnQkIiwiXyRsaXRFbGVtZW50JCIsImxpdEVsZW1lbnRIeWRyYXRlU3VwcG9ydCIsIkxpdEVsZW1lbnQiLCJsaXRFbGVtZW50UG9seWZpbGxTdXBwb3J0IiwibGl0RWxlbWVudFZlcnNpb25zIiwiY3VzdG9tRWxlbWVudHMiLCJkZWZpbmUiLCJraW5kIiwiZWxlbWVudHMiLCJmaW5pc2hlciIsImRlc2NyaXB0b3IiLCJwbGFjZW1lbnQiLCJvcmlnaW5hbEtleSIsImluaXRpYWxpemVyIiwiSFRNTFNsb3RFbGVtZW50IiwiYXNzaWduZWRFbGVtZW50cyIsIkFwcEJ1dHRvbiIsIm9zIiwiQnV0dG9uIiwiQ2FyZCIsIkNvbnRhaW5lciIsIkdyaWQiLCJIZWFkaW5nIiwidmFyaWFudCIsImNvbXBvbmVudCIsIm91dHB1dCIsIlNlY3Rpb24iLCJub1BhZGRpbmciLCJwcmltYXJ5IiwiY29uc29sZSIsImxvZyIsIkhlcm8iLCJiYWNrZ3JvdW5kIl0sInNvdXJjZVJvb3QiOiIifQ==